/*!
  * Sa11y, the accessibility quality assurance assistant.
  * @version 3.0.3
  * @author Adam Chaboryk, Toronto Metropolitan University
  * @license GPL-2.0-or-later
  * @copyright Â© 2020 - 2023 Toronto Metropolitan University (formerly Ryerson University).
  * @contact adam.chaboryk@torontomu.ca
  * GitHub: git+https://github.com/ryersondmp/sa11y.git | Website: https://sa11y.netlify.app
  * For all acknowledgements, please visit: https://sa11y.netlify.app/acknowledgements/
  * The above copyright notice shall be included in all copies or substantial portions of the Software.
* */
const defaultOptions = {
  checkRoot: 'body', containerIgnore: '.sa11y-ignore', contrastIgnore: '.sr-only, [role="menu"] *', outlineIgnore: '', headerIgnore: '', imageIgnore: '', linkIgnore: 'nav *, [role="navigation"] *', linkIgnoreSpan: '', showGoodLinkButton: !0, detectSPArouting: !1, doNotRun: '', dismissAnnotations: !0, headless: !1, selectorPath: !1, shadowComponents: '', autoDetectShadowComponents: !1, panelPosition: 'right', readabilityPlugin: !0, readabilityRoot: 'body', readabilityIgnore: '', contrastPlugin: !0, formLabelsPlugin: !0, linksAdvancedPlugin: !0, colourFilterPlugin: !0, customChecks: !0, checkAllHideToggles: !1, linksToFlag: '', linksToDOI: !0, missingH1: !0, flagLongHeadings: !0, nonConsecutiveHeadingIsError: !0, badLinksQA: !0, strongItalicsQA: !0, pdfQA: !0, documentQA: !0, langQA: !0, blockquotesQA: !0, tablesQA: !0, allCapsQA: !0, fakeHeadingsQA: !0, fakeListQA: !0, duplicateIdQA: !0, underlinedTextQA: !0, pageTitleQA: !0, subscriptQA: !0, documentLinks: '.ppt, .doc, .xls, .csv, sway.com, docs.google.com', embeddedContentAll: !0, embeddedContentAudio: !0, embeddedContentVideo: !0, embeddedContentDataViz: !0, embeddedContentTitles: !0, embeddedContentGeneral: !0, videoContent: 'youtube.com, vimeo.com, yuja.com, panopto.com', audioContent: 'soundcloud.com, simplecast.com, podbean.com, buzzsprout.com, blubrry.com, transistor.fm, fusebox.fm, libsyn.com', dataVizContent: 'datastudio.google.com, tableau',
}; const Lang = {
  langStrings: {}, addI18n(e) { this.langStrings = e; }, _(e) { return this.translate(e); }, sprintf(e, ...t) { let n = this._(e); return n = this.prepHTML(n), t && t.length && t.forEach(((e) => { n = n.replace(/%\([a-zA-z]+\)/, e); })), n; }, translate(e) { return this.langStrings[e] || e; }, prepHTML: (e) => e.replaceAll(/<hr>/g, '<hr aria-hidden="true">').replaceAll(/<a[\s]href=/g, '<a target="_blank" rel="noopener noreferrer" href=').replaceAll(/<\/a>/g, `<span class="visually-hidden"> (${Lang._('NEW_TAB')})</span></a>`).replaceAll(/{r}/g, 'class="red-text"'),
}; const styles$1 = '[data-sa11y-overflow]{overflow:auto!important}[data-sa11y-clone-image-text]{display:none!important}[data-sa11y-readability-period]{clip:rect(1px,1px,1px,1px)!important;border:0!important;-webkit-clip-path:inset(50%)!important;clip-path:inset(50%)!important;display:block!important;height:1px!important;overflow:hidden!important;padding:0!important;position:absolute!important;white-space:nowrap!important;width:1px!important}[data-sa11y-error]{outline:5px solid var(--sa11y-error)!important}[data-sa11y-warning]{outline:5px solid var(--sa11y-warning)!important}[data-sa11y-good]{outline:5px solid var(--sa11y-good)!important}[data-sa11y-error-inline]{background-color:var(--sa11y-error)!important;box-shadow:0 0 0 4px var(--sa11y-error)!important;color:var(--sa11y-error-text)!important}[data-sa11y-error-inline],[data-sa11y-warning-inline]{border-color:transparent!important;border-radius:.25em!important}[data-sa11y-warning-inline]{background-color:var(--sa11y-warning)!important;box-shadow:0 0 0 4px var(--sa11y-warning)!important;color:var(--sa11y-warning-text)!important}[data-sa11y-pulse-border]{animation:pulse 2s 3;box-shadow:0;outline:5px solid var(--sa11y-focus-color)!important}[data-sa11y-pulse-border]:focus,[data-sa11y-pulse-border]:hover{animation:none}@keyframes pulse{0%{box-shadow:0 0 0 5px var(--sa11y-focus-color)}70%{box-shadow:0 0 0 12px var(--sa11y-pulse-color)}to{box-shadow:0 0 0 5px var(--sa11y-pulse-color)}}@media (prefers-reduced-motion:reduce){[data-sa11y-pulse-border]{animation:none!important}}@media (forced-colors:active){[data-sa11y-error-inline],[data-sa11y-error],[data-sa11y-good],[data-sa11y-pulse-border],[data-sa11y-warning-inline],[data-sa11y-warning]{forced-color-adjust:none}}'; const addStylestoShadow = (e) => { const t = document.createElement('style'); t.setAttribute('class', 'sa11y-css-utilities'), t.textContent = styles$1, e.shadowRoot.appendChild(t); }; function findShadowComponents(e, t, n) { let o; if (!0 === t) { const t = 'sa11y-heading-label, sa11y-heading-anchor, sa11y-annotation, sa11y-tooltips, sa11y-dismiss-tooltip, sa11y-control-panel, #sa11y-colour-filters, #sa11y-colour-filters *, script'; const n = document.querySelector(e); const a = n ? Array.from(n.querySelectorAll(`*:not(${t})`)) : Array.from(document.body.querySelectorAll(`*:not(${t})`)); const i = []; a.forEach(((e) => { e.shadowRoot && e.shadowRoot.mode === 'open' && (i.push(e), addStylestoShadow(e)); })); const s = Array.from(i).map(((e) => e.tagName.toLowerCase())); o = s.length === 1 ? `${s.toString()}` : s.join(', '); } else if (o = n || '', o) { document.querySelectorAll(o).forEach(((e) => { addStylestoShadow(e); })); } return o; } const Constants = (function () {
  const e = {}; const t = {}; const n = {}; const o = {}; const a = {}; const i = {}; return {
    initializeGlobal(t) { e.currentPage = window.location.pathname, e.html = document.querySelector('html'), e.headless = t.headless, e.panelPosition = t.panelPosition, e.contrastPlugin = t.contrastPlugin, e.formLabelsPlugin = t.formLabelsPlugin, e.linksAdvancedPlugin = t.linksAdvancedPlugin, e.colourFilterPlugin = t.colourFilterPlugin, e.checkAllHideToggles = t.checkAllHideToggles, e.Root = document.querySelector(t.checkRoot), t.checkRoot || (e.Root = document.querySelector('body')); let n = !1; typeof window.matchMedia === 'function' && (n = window.matchMedia('(prefers-reduced-motion: reduce)')), e.scrollBehaviour = !n || n.matches ? 'auto' : 'smooth', e.langDirection = e.html.getAttribute('dir') === 'rtl' ? 'rtl' : 'ltr', t.documentLinks && (e.documentLinks = `${t.documentLinks}`); }, Global: e, initializePanelSelectors() { const e = document.querySelector('sa11y-control-panel').shadowRoot; t.panel = e.getElementById('panel'), t.content = e.getElementById('panel-content'), t.controls = e.getElementById('panel-controls'), t.outline = e.getElementById('outline-panel'), t.outlineContent = e.getElementById('outline-content'), t.outlineList = e.getElementById('outline-list'), t.outlineHeader = e.getElementById('outline-header'), t.notifBadge = e.getElementById('notification-badge'), t.notifCount = e.getElementById('notification-count'), t.notifText = e.getElementById('notification-text'), t.status = e.getElementById('status'), t.pageIssues = e.getElementById('page-issues'), t.pageIssuesList = e.getElementById('page-issues-list'), t.pageIssuesHeader = e.getElementById('page-issues-header'), t.pageIssuesContent = e.getElementById('page-issues-content'), t.settings = e.getElementById('settings-panel'), t.settingsHeader = e.getElementById('settings-header'), t.settingsContent = e.getElementById('settings-content'), t.contrastToggle = e.getElementById('contrast-toggle'), t.labelsToggle = e.getElementById('labels-toggle'), t.linksToggle = e.getElementById('links-advanced-toggle'), t.readabilityToggle = e.getElementById('readability-toggle'), t.themeToggle = e.getElementById('theme-toggle'), t.contrastItem = e.getElementById('contrast-item'), t.labelsItem = e.getElementById('form-labels-item'), t.linksItem = e.getElementById('links-advanced-item'), t.readabilityItem = e.getElementById('readability-item'), t.darkModeItem = e.getElementById('dark-mode-item'), t.colourPanel = e.getElementById('panel-colour-filters'), t.colourFilterItem = e.getElementById('colour-filter-item'), t.colourFilterSelect = e.getElementById('colour-filter-select'), t.colourFilterIcon = e.getElementById('filter-icon'), t.toggle = e.getElementById('toggle'), t.outlineToggle = e.getElementById('outline-toggle'), t.settingsToggle = e.getElementById('settings-toggle'), t.skipButton = e.getElementById('skip-button'), t.dismissButton = e.getElementById('dismiss-button'), t.dismissTooltip = e.getElementById('dismiss-tooltip'), t.skipToPageIssues = e.getElementById('skip-to-page-issues'), t.alert = e.getElementById('panel-alert'), t.alertText = e.getElementById('panel-alert-text'), t.alertPreview = e.getElementById('panel-alert-preview'), t.alertClose = e.getElementById('close-alert'), t.readability = e.getElementById('readability-panel'), t.readabilityInfo = e.getElementById('readability-info'), t.readabilityDetails = e.getElementById('readability-details'); }, Panel: t, initializeReadability(t) { if (!0 === t.readabilityPlugin) { n.Root = document.querySelector(t.readabilityRoot), n.Root || (e.Root ? (n.Root = e.Root, console.error(`Sa11y configuration error: The selector '${t.readabilityRoot}' used for the property 'readabilityRoot' does not exist. '${e.Root.tagName}' was used as a fallback.`)) : n.Root = document.querySelector('body')), n.Lang = Lang._('LANG_CODE').substring(0, 2); const o = ['en', 'fr', 'es', 'de', 'nl', 'it', 'sv', 'fi', 'da', 'no', 'nb', 'nn', 'pt']; const a = Constants.Global.html.getAttribute('lang'); if (a) { const e = a.toLowerCase().substring(0, 2); o.includes(e) && o.includes(n.Lang) ? n.Plugin = !0 : n.Plugin = !1; } else n.Plugin = !1; } }, Readability: n, initializeExclusions(e) { if (e.containerIgnore) { const t = e.containerIgnore.split(',').map(((e) => `${e} *, ${e}`)); o.Container = `[aria-hidden], #wpadminbar *, ${t.join(', ')}`; } else o.Container = '[aria-hidden], #wpadminbar *'; if (o.Contrast = 'script, style, link', e.contrastIgnore && (o.Contrast = `${e.contrastIgnore}, ${o.Contrast}`), o.Readability = 'nav li, [role="navigation"] li', e.readabilityIgnore && (o.Readability = `${e.readabilityIgnore}, ${o.Readability}`), e.headerIgnore && (o.Headings = `${e.headerIgnore}`), e.outlineIgnore && (o.Outline = `${e.outlineIgnore}`), o.Images = '[role="presentation"]', e.imageIgnore && (o.Images = `${e.imageIgnore}, ${o.Images}`), o.Links = '[aria-hidden="true"], .anchorjs-link', e.linkIgnore && (o.Links = `${e.linkIgnore}, ${o.Links}`), e.linkIgnoreSpan) { const t = e.linkIgnoreSpan.split(',').map(((e) => `${e} *, ${e}`)); o.LinkSpan = `noscript, ${t.join(', ')}`; } else o.LinkSpan = 'noscript'; }, Exclusions: o, initializeEmbeddedContent(e) { if (e.videoContent) { const t = e.videoContent.split(/\s*[\s,]\s*/).map(((e) => `[src*='${e}']`)); a.Video = `video, ${t.join(', ')}`; } else a.Video = 'video'; if (e.audioContent) { const t = e.audioContent.split(/\s*[\s,]\s*/).map(((e) => `[src*='${e}']`)); a.Audio = `audio, ${t.join(', ')}`; } else a.Audio = 'audio'; if (e.dataVizContent) { const t = e.dataVizContent.split(/\s*[\s,]\s*/).map(((e) => `[src*='${e}']`)); a.Visualization = t.join(', '); } else a.Visualization = 'datastudio.google.com, tableau'; a.All = `${a.Video}, ${a.Audio}, ${a.Visualization}`; }, EmbeddedContent: a, initializeShadowSearch(e, t, n) { i.Components = findShadowComponents(e, t, n); }, Shadow: i,
  };
}()); function find(e, t, n) { let o; t === 'document' ? o = document : t === 'readability' ? (o = Constants.Readability.Root, o || (o = Constants.Global.Root)) : t === 'root' ? (o = Constants.Global.Root, o || (o = document.body)) : t === 'panel' ? (o = Constants.Panel.panel, o || (o = document.body)) : (o = document.querySelector(t), o || (o = document.body)); const a = Constants.Shadow.Components; const i = a ? `, ${a}` : ''; const s = Constants.Exclusions.Container; const r = void 0 !== n ? `, ${n}` : ''; const l = Array.from(o.querySelectorAll(`:is(${e}${i}):not(${s}${r})`)); if (a.length) { const t = []; const n = a.trim().replace(/^,+/, ''); if (l.forEach(((o, a) => { o.matches(n) && (t[a] = o.shadowRoot.querySelectorAll(`:is(${e}):not(${s}${r})`)); })), t.length > 0) for (let e = t.length - 1; e >= 0; e--)t[e] && l.splice(e, 1, ...t[e]); } return l; } function documentLoadingCheck(e) { document.readyState === 'complete' ? e() : window.addEventListener('load', e); } function isElementVisuallyHiddenOrHidden(e) { if (e.getAttribute('hidden') || e.offsetWidth === 0 && e.offsetHeight === 0 || e.clientHeight === 1 && e.clientWidth === 1) return !0; return getComputedStyle(e).getPropertyValue('display') === 'none'; } function isElementHidden(e) { if (e.getAttribute('hidden') || e.offsetWidth === 0 && e.offsetHeight === 0) return !0; return getComputedStyle(e).getPropertyValue('display') === 'none'; } function escapeHTML(e) { const t = document.createElement('div'); return t.textContent = e, t.innerHTML.replaceAll('"', '&quot;').replaceAll("'", '&#039;').replaceAll('`', '&#x60;'); } function sanitizeHTML(e) { return e.replace(/[^\w. ]/gi, ((e) => `&#${e.charCodeAt(0)};`)); } function getText(e) { return e.textContent.replace(/[\n\r]+|[\s]{2,}/g, ' ').trim(); } function computeTextNodeWithImage(e) { const t = getText(e); const n = Array.from(e.querySelectorAll('img')); let o = ''; if (n.length === 0 && t.length > 1)o = t; else if (n.length && t.length === 0) { const e = n[0].getAttribute('alt'); e && e !== ' ' && e !== '' ? void 0 !== e && (o = e) : o = ''; } else n.length && t.length && (n.forEach(((e) => { e.insertAdjacentHTML('afterend', ` <span data-sa11y-clone-image-text aria-hidden="true">${n[0].getAttribute('alt')}</span>`); })), o = t); return o; } function debounce$2(e, t) { let n = null; return (...o) => { window.clearTimeout(n), n = window.setTimeout((() => { e(...o); }), t); }; } function fnIgnore(e, t) { const n = 'noscript, script, style'; const o = t ? `${n}, ${t}` : n; const a = e.cloneNode(!0); return Array.from(a.querySelectorAll(o)).forEach(((e) => { e.parentElement.removeChild(e); })), a; } function computeAccessibleName(e) { if (e.matches('[aria-label]')) return e.getAttribute('aria-label'); if (e.matches('[aria-labelledby]')) { const t = e.getAttribute('aria-labelledby').split(/\s+/); if (t.length > 0) { let e = ''; return t.forEach(((t) => { const n = document.querySelector(`#${CSS.escape(t)}`); n === null ? e += ' ' : n.hasAttribute('aria-label') ? e += `${n.getAttribute('aria-label')}` : e += `${n.firstChild.nodeValue} `; })), e; } } if (Array.from(e.children).filter(((e) => e.matches('[aria-label]'))).length > 0) { const t = Array.from(e.childNodes); let n = ''; return t.forEach(((e) => { e.nodeType === 1 ? e.nodeType === 3 || e.ariaLabel === null ? n += e.innerText : n += e.getAttribute('aria-label') : n += e.nodeValue; })), n; } if (Array.from(e.children).filter(((e) => e.matches('[aria-labelledby]'))).length > 0) { const t = Array.from(e.childNodes); let n = ''; return t.forEach(((e) => { if (e.nodeType === 8);else if (e.nodeType === 3 || e.getAttribute('aria-labelledby') === null)n += e.nodeValue; else { const t = e.getAttribute('aria-labelledby').split(/\s+/); if (t.length > 0) { let e = ''; t.forEach(((t) => { document.querySelector(`#${CSS.escape(t)}`) === null ? e += ' ' : e += `${document.querySelector(`#${CSS.escape(t)}`).firstChild.nodeValue} `; })), n += e; } } })), n; } return 'noAria'; } function findVisibleParent(e, t, n) { let o = e; for (;o !== null;) { if (window.getComputedStyle(o).getPropertyValue(t) === n) return o; o = o.parentElement; } return null; } function offsetTop(e) { const t = e.getBoundingClientRect(); const n = window.pageYOffset || document.documentElement.scrollTop; return { top: t.top + n }; } const store = { getItem(e) { try { return localStorage.getItem(e) === null ? sessionStorage.getItem(e) : localStorage.getItem(e); } catch (e) { return !1; } }, setItem(e, t) { try { localStorage.setItem(e, t); } catch (n) { sessionStorage.setItem(e, t); } return !0; }, removeItem(e) { try { localStorage.removeItem(e); } catch (t) { sessionStorage.removeItem(e); } return !0; } }; function addPulse(e) { const t = 'data-sa11y-pulse-border'; e.setAttribute(t, ''), setTimeout((() => { e.removeAttribute(t); }), 2500); } function getNextSibling(e, t) { let n = e.nextElementSibling; if (!t) return n; for (;n;) { if (n.matches(t)) return n; n = n.nextElementSibling; } return ''; } function prepareDismissal(e) { return String(e).replace(/([^0-9a-zA-Z])/g, '').substring(0, 256); } function generateSelectorPath(e) { const t = []; let n = e; for (;n;) { let e = n.localName; if (n.id) { e += `#${n.id}`, t.unshift(e); break; }n.className && (e += `.${n.className.replace(/\s+/g, '.')}`); const o = n.parentNode; if (!o) break; { const a = o.children; if (a.length > 1) { e += `:nth-child(${Array.prototype.indexOf.call(a, n) + 1})`; }t.unshift(e); }n = n.parentNode.host || n.parentNode; } return t.join(' > '); } function trapFocus(e) { const t = e.querySelectorAll('a[href]:not([disabled]), button:not([disabled])'); const n = t[0]; const o = t[t.length - 1]; e.addEventListener('keydown', ((t) => { const a = t.key === 'Tab' || t.keyCode === 9; const i = e.getRootNode(); a && (t.shiftKey ? i.activeElement === n && (o.focus(), t.preventDefault()) : i.activeElement === o && (n.focus(), t.preventDefault())); })); } function removeAlert() { const e = document.querySelector('sa11y-control-panel').shadowRoot; const t = e.getElementById('panel-alert'); const n = e.getElementById('panel-alert-text'); const o = e.getElementById('panel-alert-preview'); for (t.classList.remove('active'), o.classList.remove('panel-alert-preview'); n.firstChild;)n.removeChild(n.firstChild); for (;o.firstChild;)o.removeChild(o.firstChild); } function createAlert(e, t) { removeAlert(); const n = document.querySelector('sa11y-control-panel').shadowRoot; const o = n.getElementById('panel-alert'); const a = n.getElementById('panel-alert-text'); const i = n.getElementById('panel-alert-preview'); const s = n.getElementById('close-alert'); const r = n.getElementById('skip-button'); o.classList.add('active'), a.innerHTML = e, t && (i.classList.add('panel-alert-preview'), i.innerHTML = t), setTimeout((() => { s.focus(); }), 300), s.addEventListener('click', (() => { removeAlert(), r.hasAttribute('disabled') ? n.getElementById('toggle').focus() : r.focus(); })); } function resetAttributes(e, t) { e.forEach(((e) => { find(`[${e}]`, `${t}`).forEach(((t) => { t.removeAttribute(e); })); })); } function remove(e, t) { find(`${e}`, `${t}`).forEach(((e) => { e.parentNode.removeChild(e); })); } function isScrollable(e, t) { e.scrollHeight > t.clientHeight ? (t.classList.add('scrollable'), e.setAttribute('tabindex', '0')) : t.classList.remove('scrollable'); } const Elements = (function () {
  const e = {}; const t = {}; return {
    initializeElements(t) { e.Images = find('img', 'root', Constants.Exclusions.Images), e.Headings = find('h1, h2, h3, h4, h5, h6, [role="heading"][aria-level]', 'root', Constants.Exclusions.Headings), e.HeadingOne = find('h1, [role="heading"][aria-level="1"]', 'document', Constants.Exclusions.Headings), e.Links = find('a[href]', 'root', Constants.Exclusions.Links), e.Inputs = find('input, select, textarea', 'root', Constants.Exclusions.Container), e.Contrast = find('*', 'root', Constants.Exclusions.Contrast), e.Labels = find('label', 'root', Constants.Exclusions.Container), e.Readability = find('p, li', 'readability', Constants.Exclusions.Readability), e.Paragraphs = find('p', 'root', Constants.Exclusions.Container), e.Lists = find('li', 'root', Constants.Exclusions.Container), e.Spans = find('span', 'root', Constants.Exclusions.Container), e.Blockquotes = find('blockquote', 'root', Constants.Exclusions.Container), e.Tables = find('table:not([role="presentation"])', 'root', Constants.Exclusions.Container), e.StrongItalics = find('strong, em', 'root', Constants.Exclusions.Container), e.Ids = find('[id]', 'document', Constants.Exclusions.Container), e.Underlines = find('u', 'root', Constants.Exclusions.Container), e.Subscripts = find('sup, sub', 'root', Constants.Exclusions.Container), e.Language = Constants.Global.html.getAttribute('lang'), e.CustomErrorLinks = t ? find(t, 'root', Constants.Exclusions.Container) : [], e.Iframes = find('iframe, audio, video', 'root', Constants.Exclusions.Container), e.Videos = e.Iframes.filter(((e) => e.matches(Constants.EmbeddedContent.Video))), e.Audio = e.Iframes.filter(((e) => e.matches(Constants.EmbeddedContent.Audio))), e.Visualizations = e.Iframes.filter(((e) => e.matches(Constants.EmbeddedContent.Visualization))), e.EmbeddedContent = e.Iframes.filter(((e) => !e.matches(Constants.EmbeddedContent.All))); }, Found: e, initializeAnnotations() { t.Array = find('sa11y-annotation', 'root'), t.Array.forEach(((e, t) => { e.setAttribute('data-sa11y-position', t); })); }, Annotations: t,
  };
}()); function detectPageChanges(e, t, n) { if (!0 === e) { let e = Constants.Global.currentPage; const o = debounce$2((async () => { e !== window.location.pathname && (store.getItem('sa11y-remember-panel') !== 'Closed' && store.getItem('sa11y-remember-panel') ? (n(!1), await t()) : t(), e = window.location.pathname); }), 250); window.addEventListener('mousemove', o), window.addEventListener('keydown', o); } } function dismissAnnotationsLogic(e, t) { let n = store.getItem('sa11y-dismissed'); n = n ? JSON.parse(n) : []; const o = n.map(((t) => { const n = e.find(((e) => t.key.includes(e.dismiss) && t.href === Constants.Global.currentPage)); return void 0 === n ? '' : n; })); const a = e.filter(((e) => o.find(((t) => t.dismiss === e.dismiss)))).length; const i = e.filter(((e) => !o.find(((t) => t.dismiss === e.dismiss)))); return a >= 1 ? (Constants.Panel.dismissButton.classList.add('active'), Constants.Panel.dismissTooltip.innerText = Lang.sprintf('PANEL_DISMISS_BUTTON', a), t.object.setContent(Lang.sprintf('PANEL_DISMISS_BUTTON', a))) : Constants.Panel.dismissButton.classList.remove('active'), { dismissedIssues: n, updatedResults: i, dismissCount: a }; } function dismissAnnotationsButtons(e, t, n, o, a) { if (!0 === e) { const e = document.querySelector('sa11y-tooltips').shadowRoot; const i = document.querySelector('sa11y-control-panel').shadowRoot; const s = document.querySelector('sa11y-dismiss-tooltip'); const r = async (n) => { let l = JSON.parse(store.getItem('sa11y-dismissed')); const d = n.target; if (s.hidden = !1, d.tagName === 'BUTTON' && d.hasAttribute('data-sa11y-dismiss')) { const n = parseInt(d.getAttribute('data-sa11y-dismiss'), 10); const s = t.find(((e) => e.id === n)); l === null && (setTimeout((() => createAlert(Lang._('DISMISS_REMINDER'))), 0), l = []); const c = { key: s.dismiss, href: Constants.Global.currentPage }; const p = find(`[data-sa11y-annotation='${s.id}']`)[0].getAttribute('data-sa11y-position'); store.setItem('sa11y-latest-dismissed', p), store.setItem('sa11y-dismiss-item', JSON.stringify(c)), l.push(c), store.setItem('sa11y-dismissed', JSON.stringify(l)), store.removeItem('sa11y-dismiss-item'), d.closest('[data-tippy-root]') !== null && d.closest('[data-tippy-root]').remove(), a(!1), await o(), e.removeEventListener('click', r), i.removeEventListener('click', r); } }; e.addEventListener('click', r), i.addEventListener('click', r), Constants.Panel.dismissButton.onclick = async () => { s.hidden = !0; const e = n.filter(((e) => e.href !== Constants.Global.currentPage)); store.setItem('sa11y-dismissed', JSON.stringify(e)), Constants.Panel.dismissButton.classList.remove('active'), a(!1), await o(); }; } } function addColourFilters() { if (!0 === Constants.Global.colourFilterPlugin && !1 === Constants.Global.headless) { const e = document.createElement('div'); e.id = 'sa11y-colour-filters', e.setAttribute('aria-hidden', 'true'), e.innerHTML = '\n        \x3c!-- DaltonLens SVG filters to simulate color vision deficiencies --\x3e\n        <svg id="sa11y-svg-filters" xmlns="http://www.w3.org/2000/svg">\n          <filter id="sa11y-protanopia" color-interpolation-filters="linearRGB">\n            <feColorMatrix type="matrix" in="SourceGraphic" values="\n                0.10889,0.89111,-0.00000,0,0\n                0.10889,0.89111,0.00000,0,0\n                0.00447,-0.00447,1.00000,0,0\n                0,0,0,1,0"\n            />\n          </filter>\n          <filter id="sa11y-deuteranopia" color-interpolation-filters="linearRGB">\n            <feColorMatrix type="matrix" in="SourceGraphic" values="\n                0.29031,0.70969,-0.00000,0,0\n                0.29031,0.70969,-0.00000,0,0\n                -0.02197,0.02197,1.00000,0,0\n                0,0,0,1,0"\n            />\n          </filter>\n          <filter id="sa11y-tritanopia" color-interpolation-filters="linearRGB">\n            <feColorMatrix type="matrix" in="SourceGraphic" result="ProjectionOnPlane1" values="\n                1.01354, 0.14268, -0.15622, 0, 0\n                -0.01181, 0.87561, 0.13619, 0, 0\n                0.07707, 0.81208, 0.11085, 0, 0\n                7.92482, -5.66475, -2.26007, 1, -0.2"\n            />\n            <feComponentTransfer in="ProjectionOnPlane1" result="ProjectionOnPlane1">\n                <feFuncA type="discrete" tableValues="0 0 0 0 1"/>\n            </feComponentTransfer>\n            <feColorMatrix type="matrix" in="SourceGraphic" result="ProjectionOnPlane2" values="\n                0.93337, 0.19999, -0.13336, 0, 0\n                0.05809, 0.82565, 0.11626, 0, 0\n                -0.37923, 1.13825, 0.24098, 0, 0\n                0,0,0,1,0"\n            />\n            <feBlend in="ProjectionOnPlane1" in2="ProjectionOnPlane2" mode="normal"/>\n          </filter>\n          <filter id="sa11y-monochromacy">\n            <feColorMatrix values="0.33 0.33 0.33 0 0                           0.33 0.33 0.33 0 0                           0.33 0.33 0.33 0 0                           0 0 0 1 0"></feColorMatrix>\n          </filter>\n        </svg>', document.body.appendChild(e); } } const styles = ':host{background:var(--sa11y-panel-bg);border-top:5px solid var(--sa11y-panel-bg-splitter);bottom:0;display:block;height:-moz-fit-content;height:fit-content;position:fixed;width:100%;z-index:999999}*{-webkit-font-smoothing:auto!important;color:var(--sa11y-panel-primary);font-family:var(--sa11y-font-face)!important;font-size:var(--sa11y-normal-text);line-height:22px!important}#dialog{margin:20px auto;max-width:900px;padding:20px}h2{font-size:var(--sa11y-large-text);margin-top:0}a{color:var(--sa11y-hyperlink);cursor:pointer;text-decoration:underline}a:focus,a:hover{text-decoration:none}p{margin-top:0}.error{background:var(--sa11y-error);border:2px dashed #f08080;color:var(--sa11y-error-text);margin-bottom:0;padding:5px}'; const sharedStyles = '.visually-hidden{clip:rect(1px,1px,1px,1px);border:0;-webkit-clip-path:inset(50%);clip-path:inset(50%);display:block;height:1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}[hidden]{display:none!important}.header-text,.header-text-inline,h2{color:var(--sa11y-panel-primary);display:block;font-size:var(--sa11y-large-text);font-weight:600;margin-bottom:3px}.header-text-inline{display:inline-block!important}.kbd,code,kbd{background-color:var(--sa11y-panel-badge);border-radius:3.2px;color:var(--sa11y-panel-primary);padding:1.6px 4.8px}code{font-family:monospace}.bold{font-weight:600}.red-text{color:var(--sa11y-red-text)}.red-text,.yellow-text{font-family:var(--sa11y-font-face);font-size:var(--sa11y-normal-text)}.yellow-text{color:var(--sa11y-yellow-text)}.close-btn{background:none;border:1px solid var(--sa11y-button-outline);border-radius:50%;color:var(--sa11y-panel-primary);cursor:pointer;float:var(--sa11y-float-rtl);font-size:var(--sa11y-normal-text);font-weight:400;height:32px;margin:0;position:relative;transition:all .2s ease-in-out;width:32px}.close-btn:focus,.close-btn:hover{background-color:var(--sa11y-shortcut-hover)}.close-btn:after{background:var(--sa11y-setting-switch-bg-off);bottom:-7px;content:"";left:-7px;-webkit-mask:var(--sa11y-close-btn-svg) center no-repeat;mask:var(--sa11y-close-btn-svg) center no-repeat;position:absolute;right:-7px;top:-7px}@media screen and (forced-colors:active){.close-btn:after{filter:invert(1)}}#container [tabindex="-1"]:focus,#container [tabindex="0"]:focus,#container a:focus,#container button:not(#settings-toggle):not(#outline-toggle):not(.switch):focus,#container select:focus{box-shadow:0 0 0 5px var(--sa11y-focus-color);outline:0}#container #outline-toggle:focus,#container #settings-toggle:focus,#container .switch:focus{box-shadow:inset 0 0 0 4px var(--sa11y-focus-color);outline:0}.tippy-box[data-theme~=sa11y-theme] [tabindex="-1"]:focus,.tippy-box[data-theme~=sa11y-theme] a:focus,.tippy-box[data-theme~=sa11y-theme] button:active,.tippy-box[data-theme~=sa11y-theme] button:focus{box-shadow:0 0 0 5px var(--sa11y-focus-color);outline:0}#container #outline-toggle:focus:not(:focus-visible),#container #settings-toggle:focus:not(:focus-visible),#container [tabindex="-1"]:focus:not(:focus-visible),#container [tabindex="0"]:focus:not(:focus-visible),#container button:focus:not(:focus-visible),#container select:focus:not(:focus-visible){box-shadow:none;outline:0}.tippy-box[data-theme~=sa11y-theme] [tabindex="-1"]:focus:not(:focus-visible),.tippy-box[data-theme~=sa11y-theme] a:focus:not(:focus-visible),.tippy-box[data-theme~=sa11y-theme] button:focus:not(:focus-visible){box-shadow:none;outline:0}#container [tabindex="-1"]:focus-visible,#container [tabindex="0"]:focus-visible,#container a:focus-visible,#container button:not(#settings-toggle):not(#outline-toggle):not(.switch):focus-visible,#container select:focus-visible{box-shadow:0 0 0 5px var(--sa11y-focus-color);outline:0}#container #outline-toggle:focus-visible,#container #settings-toggle:focus-visible,#container .switch:focus-visible{box-shadow:inset 0 0 0 4px var(--sa11y-focus-color);outline:0}.tippy-box[data-theme~=sa11y-theme] [tabindex="-1"]:focus-visible,.tippy-box[data-theme~=sa11y-theme] a:focus-visible,.tippy-box[data-theme~=sa11y-theme] button:focus-visible{box-shadow:0 0 0 5px var(--sa11y-focus-color);outline:0}@media screen and (forced-colors:active){#outline-toggle:focus,#settings-toggle:focus{border:3px solid transparent}#container [tabindex="-1"]:focus,#container [tabindex="0"]:focus,#container a:focus,#container button:focus,#container select:focus,.close-btn:focus,.tippy-box[data-theme~=sa11y-theme] [tabindex="-1"]:focus,.tippy-box[data-theme~=sa11y-theme] a:focus,.tippy-box[data-theme~=sa11y-theme] button:focus{outline:3px solid transparent!important}}'; class ConsoleErrors extends HTMLElement {
  constructor(e) { super(), this.error = e; }

  connectedCallback() { const e = this.attachShadow({ mode: 'open' }); const t = document.createElement('style'); t.innerHTML = styles + sharedStyles, e.appendChild(t); const n = document.createElement('div'); n.setAttribute('id', 'dialog'), n.setAttribute('tabindex', '-1'); const o = window.location; const a = `https://github.com/ryersondmp/sa11y/issues/new?title=Bug%20report&body=%23%23%20Error%20Description%0A%60%60%60javascript%0A${encodeURIComponent(this.error.stack)}%0A%60%60%60%0A%0A%23%23%20URL%0A%60${o}%60%0A%0A%23%23%20Comments%0A`; n.innerHTML = `\n      <button class="close-btn" aria-label="${Lang._('ALERT_CLOSE')}"></button>\n      <h2>${Lang._('ERROR')}</h2>\n      <p>${Lang.sprintf('CONSOLE_ERROR_MESSAGE', 'https://forms.gle/sjzK9XykETaoqZv99', a)}</p>\n      <p class="error">${escapeHTML(this.error.stack)}<br><br>URL: ${o}</p>\n    `, e.appendChild(n), setTimeout((() => { Constants.Panel.toggle.style.display = 'none'; const e = document.querySelector('sa11y-console-error'); e.shadowRoot.getElementById('dialog').focus(); e.shadowRoot.querySelector('.close-btn').addEventListener('click', (() => { e.remove(); })); }), 0); }
} function mainToggle(e, t) { Constants.Panel.toggle.addEventListener('click', ((n) => { store.getItem('sa11y-remember-panel') === 'Opened' ? (n.preventDefault(), store.setItem('sa11y-remember-panel', 'Closed'), Constants.Panel.toggle.classList.remove('on'), Constants.Panel.toggle.setAttribute('aria-expanded', 'false'), t(), Constants.Panel.notifCount.innerHTML.trim() === '' ? Constants.Panel.notifBadge.style.display = 'none' : Constants.Panel.notifBadge.style.display = 'flex') : (n.preventDefault(), store.setItem('sa11y-remember-panel', 'Opened'), Constants.Panel.toggle.classList.add('on'), Constants.Panel.toggle.setAttribute('aria-expanded', 'true'), e(), isScrollable(Constants.Panel.outlineList, Constants.Panel.outlineContent)); })), store.getItem('sa11y-remember-panel') === 'Opened' && (Constants.Panel.toggle.classList.add('on'), Constants.Panel.toggle.setAttribute('aria-expanded', 'true'), Constants.Panel.panel.style.transform = ''), document.onkeydown = (e) => { const n = e || window.event; n.key === 'Escape' && Constants.Panel.panel.classList.contains('active') && (Constants.Panel.toggle.setAttribute('aria-expanded', 'false'), Constants.Panel.toggle.classList.remove('on'), Constants.Panel.toggle.click(), t()), n.altKey && n.code === 'KeyA' && (Constants.Panel.toggle.click(), Constants.Panel.toggle.focus(), n.preventDefault()); }; } const panelStyles = 'a,button,code,div,h1,h2,kbd,label,li,ol,p,span,strong,svg,ul{all:unset;box-sizing:border-box!important}:after,:before{all:unset}div{display:block}*{-webkit-font-smoothing:auto!important;font-family:var(--sa11y-font-face)!important;line-height:22px!important}label,li,ol,p,ul{font-size:var(--sa11y-normal-text);font-weight:400;letter-spacing:normal;text-align:start;word-break:normal}.sa11y-overflow{overflow:auto}#toggle{align-items:center;background:linear-gradient(0deg,#e040fb,#00bcd4);background-color:var(--sa11y-blue);background-size:150% 150%;border-radius:50%;bottom:15px;color:#fff;cursor:pointer;display:flex;height:55px;inset-inline-end:18px;justify-content:center;margin:0;overflow:visible;position:fixed;transition:all .2s ease-in-out;width:55px;z-index:2147483644}#toggle.left,#toggle.top-left{inset-inline-start:18px}#toggle.top-left,#toggle.top-right{bottom:unset;top:15px}@media screen and (forced-colors:active){#toggle{border:2px solid transparent}}#toggle svg{height:35px;width:35px}#toggle svg path{fill:var(--sa11y-panel-bg)}#toggle:focus,#toggle:hover{animation:sa11y-toggle-gradient 3s ease}#toggle:disabled:focus,#toggle:disabled:hover{animation:none}#toggle.on{background:linear-gradient(180deg,#e040fb,#00bcd4);background-color:var(--sa11y-blue)}#notification-badge{align-items:center;background-color:#eb0000;border:1px solid transparent;border-radius:50%;color:#fff;display:none;font-size:13px;font-weight:400;height:20px;justify-content:center;position:absolute;right:-3px;top:-3px;width:20px}#notification-badge.notification-badge-warning{background-color:var(--sa11y-warning-hover);border:1px solid var(--sa11y-warning);color:var(--sa11y-warning-text)}#panel{background:var(--sa11y-panel-bg);border-radius:4px;bottom:25px;box-shadow:0 0 20px 4px rgba(154,161,177,.15),0 4px 80px -8px rgba(36,40,47,.25),0 4px 4px -2px rgba(91,94,105,.15);inset-inline-end:42px;opacity:0;overflow:visible;position:fixed;transform:scale(0);transform-origin:100% 100%;transition:transform .2s,opacity background .2s .2s;visibility:hidden;z-index:2147483643}#panel.left,#panel.top-left{inset-inline-start:42px}#panel.top-left,#panel.top-right{bottom:unset;top:50px}#panel.active{height:auto;opacity:1;transform:scale(1);transform-origin:bottom right;transition:transform .2s,opacity .2s;visibility:visible}@media screen and (forced-colors:active){#panel{border:2px solid transparent}}#panel.active.left,[dir=rtl] #panel.active{transform-origin:bottom left}#panel.active.top-left{transform-origin:top left}#panel.active.top-right{transform-origin:top right}#panel-alert{display:none;opacity:0}#panel-alert.active{display:block;opacity:1}#panel-alert-content{align-items:center;border-bottom:1px solid var(--sa11y-panel-bg-splitter);color:var(--sa11y-panel-primary);max-height:200px;overflow-y:auto;padding:15px 20px 15px 15px;position:relative}#panel-alert-preview .close-tooltip{display:none}#panel-alert-preview,#panel-alert-text{font-family:var(--sa11y-font-face);font-size:var(--sa11y-normal-text);font-weight:400;line-height:22px}.panel-alert-preview{background:var(--sa11y-panel-bg-secondary);border:1px dashed var(--sa11y-panel-bg-splitter);border-radius:5px;margin-top:15px;padding:10px}button[data-sa11y-dismiss]{background:var(--sa11y-panel-bg);border:1px solid var(--sa11y-button-outline);border-radius:5px;color:var(--sa11y-panel-primary);cursor:pointer;display:block;margin:10px 5px 5px 0;padding:4px 8px}button[data-sa11y-dismiss]:focus,button[data-sa11y-dismiss]:hover{background:var(--sa11y-shortcut-hover)}h2{display:block;font-size:var(--sa11y-large-text);margin-bottom:3px}h2,strong{font-weight:600}a:not(#outline-list a){border-bottom:0;color:var(--sa11y-hyperlink);cursor:pointer;text-decoration:underline}a:focus,a:hover{text-decoration:none!important}hr{background:var(--sa11y-panel-bg-splitter);border:none;height:1px;margin:10px 0;opacity:1;padding:0}#dismiss-button,#skip-button{-webkit-margin-end:8px;-webkit-margin-start:2px;background:var(--sa11y-panel-bg-secondary);border:1px solid var(--sa11y-button-outline);border-radius:50px;cursor:pointer;display:none;height:36px;margin-inline-end:8px;margin-inline-start:2px;overflow:visible;position:relative;text-align:center;transition:all .1s ease-in-out;width:36px}#dismiss-button.active,#skip-button.active{display:block}#dismiss-button:disabled,#skip-button:disabled{background:none;border:0;box-shadow:none;cursor:default}#dismiss-button:before,#skip-button:before{bottom:-5px;content:"";left:-5px;position:absolute;right:-5px;top:-5px}#dismiss-button:focus:not(:disabled),#dismiss-button:hover:not(:disabled),#skip-button:focus:not(:disabled),#skip-button:hover:not(:disabled){background-color:var(--sa11y-shortcut-hover)}#panel.left #dismiss-button,#panel.left #skip-button,#panel.top-left #dismiss-button,#panel.top-left #skip-button{-webkit-margin-start:8px;-webkit-margin-end:2px;margin-inline-end:2px;margin-inline-start:8px}.dismiss-icon{background:var(--sa11y-setting-switch-bg-off);display:inline-block;height:24px;margin-bottom:-4px;-webkit-mask:var(--sa11y-dismiss-icon) center no-repeat;mask:var(--sa11y-dismiss-icon) center no-repeat;width:24px}@media screen and (forced-colors:active){.dismiss-icon{filter:invert(1)}}#panel-content{align-items:center;color:var(--sa11y-panel-primary);display:flex;padding:6px}#panel-content.errors .panel-icon,#panel-content.good .panel-icon,#panel-content.warnings .panel-icon{height:26px;margin:0 auto;width:26px}#panel-content.errors .panel-icon{background:var(--sa11y-panel-error);margin-top:-2px;-webkit-mask:var(--sa11y-error-svg) center no-repeat;mask:var(--sa11y-error-svg) center no-repeat}#panel-content.good .panel-icon{background:var(--sa11y-good);-webkit-mask:var(--sa11y-good-svg) center no-repeat;mask:var(--sa11y-good-svg) center no-repeat}#panel-content.warnings .panel-icon{background:var(--sa11y-warning-svg-color);-webkit-mask:var(--sa11y-warning-svg) center no-repeat;mask:var(--sa11y-warning-svg) center no-repeat;transform:scaleX(var(--sa11y-icon-direction))}@media screen and (forced-colors:active){#panel-content.errors .panel-icon,#panel-content.good .panel-icon,#panel-content.warnings .panel-icon{filter:invert(1)}}#panel.left #panel-content,#panel.top-left #panel-content{flex-direction:row-reverse}#status{font-size:var(--sa11y-large-text)}#status,.panel-count{color:var(--sa11y-panel-primary)}.panel-count{background-color:var(--sa11y-panel-badge);border-radius:4px;font-size:15px;font-weight:400;margin-left:3px;margin-right:3px;padding:2px 4px}#outline-panel,#page-issues,#settings-panel{color:var(--sa11y-panel-primary);display:none;opacity:0}#outline-panel.active,#page-issues.active,#settings-panel.active{display:block;opacity:1}.panel-header{padding:10px 15px 0;text-align:start}#outline-content,#page-issues-content,#settings-content{border-bottom:1px solid var(--sa11y-panel-bg-splitter);padding:0 15px 10px}#page-issues-content{max-height:160px;overflow-y:auto}#outline-content{max-height:250px;overflow-y:auto}#outline-panel .outline-list-item.sa11y-red-text,#settings-panel .sa11y-red-text{color:var(--sa11y-red-text)}#outline-list{display:block;margin:0;padding:0}#outline-list a{cursor:pointer;display:block;text-decoration:none}#outline-list li{display:block;list-style-type:none;margin-bottom:3px;margin-top:0;padding:0}#outline-list li:first-child{margin-top:5px}#outline-list li a:focus,#outline-list li a:hover{background:var(--sa11y-panel-outline-hover);border-radius:5px;box-shadow:0 0 0 2px var(--sa11y-panel-outline-hover);display:block}#outline-list .outline-2{-webkit-margin-start:15px;margin-inline-start:15px}#outline-list .outline-3{-webkit-margin-start:30px;margin-inline-start:30px}#outline-list .outline-4{-webkit-margin-start:45px;margin-inline-start:45px}#outline-list .outline-5{-webkit-margin-start:60px;margin-inline-start:60px}#outline-list .outline-6{-webkit-margin-start:75px;margin-inline-start:75px}.badge{background-color:var(--sa11y-panel-badge);border:1px solid transparent;border-radius:10px;color:var(--sa11y-panel-primary);display:inline;font-size:13px;font-weight:700;min-width:10px;padding:2px 5px;text-align:center;white-space:nowrap}.error-badge{background:var(--sa11y-error);color:var(--sa11y-error-text)}.warning-badge{background:var(--sa11y-yellow-text);color:var(--sa11y-panel-bg)}.error-icon{background:var(--sa11y-error-text);-webkit-mask:var(--sa11y-error-svg) center no-repeat;mask:var(--sa11y-error-svg) center no-repeat}.error-icon,.hidden-icon{display:inline-block;height:16px;margin-bottom:-3px;width:16px}.hidden-icon{background:var(--sa11y-panel-primary);-webkit-mask:var(--sa11y-hidden-icon-svg) center no-repeat;mask:var(--sa11y-hidden-icon-svg) center no-repeat}.error-badge .hidden-icon{background:var(--sa11y-error-text)}.warning-badge .hidden-icon{background:var(--sa11y-panel-bg)}@media screen and (forced-colors:active){.hidden-icon{filter:invert(1)}}#panel-controls{border-radius:0 0 4px 4px;display:flex;overflow:hidden}#outline-toggle,#settings-toggle{background:var(--sa11y-panel-bg-secondary);background-color:var(--sa11y-panel-bg-secondary);border-bottom:1px solid var(--sa11y-panel-bg-splitter);border-top:1px solid var(--sa11y-panel-bg-splitter);color:var(--sa11y-panel-secondary);cursor:pointer;display:block;font-size:var(--sa11y-normal-text);font-weight:400;height:30px;line-height:0;margin:0;opacity:1;outline:0;padding:0;position:relative;text-align:center;transition:background .2s;width:100%}#outline-toggle.outline-active,#outline-toggle.settings-active,#outline-toggle:hover,#settings-toggle.outline-active,#settings-toggle.settings-active,#settings-toggle:hover{background-color:var(--sa11y-shortcut-hover)}#outline-toggle.outline-active,#outline-toggle.settings-active,#settings-toggle.outline-active,#settings-toggle.settings-active{font-weight:500}#outline-toggle{-webkit-border-end:1px solid var(--sa11y-panel-bg-splitter);border-inline-end:1px solid var(--sa11y-panel-bg-splitter)}label{display:inline-block;width:100%}#settings-panel .switch,label{color:var(--sa11y-panel-primary);cursor:pointer;font-weight:400;margin:0}#settings-panel .switch{background:none;border:0;border-radius:5px;font-size:var(--sa11y-normal-text);height:44px;padding:7px 10px;position:relative;text-align:end;width:105px}#settings-panel .switch[aria-pressed=false]:after,#settings-panel .switch[aria-pressed=true]:after{content:"";display:inline-block;height:27px;margin:0 4px 4px;vertical-align:middle;width:27px}#settings-panel .switch[aria-pressed=true]:after{background:var(--sa11y-setting-switch-bg-on);-webkit-mask:var(--sa11y-setting-switch-on-svg) center no-repeat;mask:var(--sa11y-setting-switch-on-svg) center no-repeat}#settings-panel .switch[aria-pressed=false]:after{background:var(--sa11y-setting-switch-bg-off);-webkit-mask:var(--sa11y-setting-switch-off-svg) center no-repeat;mask:var(--sa11y-setting-switch-off-svg) center no-repeat}@media screen and (forced-colors:active){#settings-panel .switch[aria-pressed=false]:after,#settings-panel .switch[aria-pressed=true]:after{filter:invert(1)}}#settings-panel #settings-options li{align-items:center;border-bottom:1px solid var(--sa11y-panel-bg-splitter);display:flex;justify-content:space-between;list-style-type:none;padding:1px 0}#settings-panel #settings-options li:last-child{border:none}#page-issues{align-items:center;color:var(--sa11y-panel-primary)}#page-issues-list{display:block;margin-top:4px}#page-issues-list li{display:block;margin:0 0 10px}#page-issues-list strong{display:block}#panel-colour-filters{align-items:center;color:var(--sa11y-panel-primary);display:none;font-family:var(--sa11y-font-face);font-size:var(--sa11y-normal-text);font-weight:400;line-height:22px}#panel-colour-filters.active{display:flex}#panel-colour-filters p{padding:6px 20px 6px 6px;width:100%}#panel-colour-filters[data-colour=protanopia]{border-bottom:6px solid transparent;-o-border-image:linear-gradient(94deg,#786719 11%,#e0c600 36%,#e0c600 47%,#0059e3 75%,#0042aa 91%);border-image:linear-gradient(94deg,#786719 11%,#e0c600 36%,#e0c600 47%,#0059e3 75%,#0042aa 91%);border-image-slice:1}#panel-colour-filters[data-colour=deuteranopia]{border-bottom:6px solid transparent;-o-border-image:linear-gradient(270deg,#567fdb,#a4a28d 48%,#c3ad14 69%,#a79505);border-image:linear-gradient(270deg,#567fdb,#a4a28d 48%,#c3ad14 69%,#a79505);border-image-slice:1}#panel-colour-filters[data-colour=tritanopia]{border-bottom:6px solid transparent;-o-border-image:linear-gradient(270deg,#b1506f,#0696c1 35%,#f3a9ba 70%,#d91c5d 87%,#fe015c);border-image:linear-gradient(270deg,#b1506f,#0696c1 35%,#f3a9ba 70%,#d91c5d 87%,#fe015c);border-image-slice:1}#panel-colour-filters[data-colour=monochromacy]{border-bottom:6px solid transparent;-o-border-image:linear-gradient(270deg,#000,#a7a7a7 50%,#000);border-image:linear-gradient(270deg,#000,#a7a7a7 50%,#000);border-image-slice:1}#panel-colour-filters[data-colour=protanopia] .panel-icon{background:var(--sa11y-panel-error)}#panel-colour-filters[data-colour=deuteranopia] .panel-icon{background:var(--sa11y-good-hover)}#panel-colour-filters[data-colour=tritanopia] .panel-icon{background:var(--sa11y-blue)}#panel-colour-filters[data-colour=monochromacy] .panel-icon{background:linear-gradient(90deg,#38a459 20%,red 50%,#0077c8 80%)}#panel-colour-filters .panel-icon{-webkit-margin-end:5px;-webkit-margin-start:10px;height:30px;margin-inline-end:5px;margin-inline-start:10px;-webkit-mask:var(--sa11y-low-vision-icon) center no-repeat;mask:var(--sa11y-low-vision-icon) center no-repeat;width:30px}@media screen and (forced-colors:active){#panel-colour-filters .panel-icon{forced-color-adjust:none}}.select-dropdown:after{border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid var(--sa11y-setting-switch-bg-off);content:" ";height:0;inset-inline-end:25px;margin-top:22.5px;position:absolute;width:0}#colour-filter-select{-webkit-padding-end:25px;-webkit-padding-start:5px;-webkit-appearance:none;-moz-appearance:none;appearance:none;background:var(--sa11y-panel-bg);border:2px solid var(--sa11y-setting-switch-bg-off);border-radius:5px;color:var(--sa11y-panel-primary);cursor:pointer;font-size:var(--sa11y-normal-text);font-weight:400;height:30px;padding-inline-end:25px;padding-inline-start:5px;position:relative;text-align:end;vertical-align:middle}#colour-filter-select.active{box-shadow:0 0 0 2px var(--sa11y-setting-switch-bg-on)}#colour-filter-item label,#colour-filter-item select{margin-bottom:9px;margin-top:10px}#readability-panel{display:none;opacity:0}#readability-panel.active{display:block;opacity:1}#readability-content{border-bottom:1px solid var(--sa11y-panel-bg-splitter);color:var(--sa11y-panel-primary);padding:10px 15px;width:100%}#readability-details{list-style-type:none;margin:0;padding:0;white-space:normal}#readability-details li{-webkit-padding-end:10px;display:inline-block;list-style-type:none;margin:0;padding-inline-end:10px}.readability-score{-webkit-margin-start:5px;background-color:var(--sa11y-panel-badge);border-radius:4px;color:var(--sa11y-panel-primary);margin-inline-start:5px;padding:2px 5px}#readability-info{-webkit-margin-start:10px;margin-inline-start:10px}#skip-to-page-issues{display:none}#panel.has-page-issues #skip-to-page-issues{clip:rect(0,0,0,0);background:var(--sa11y-panel-bg);border:0;border-radius:5px;display:block;height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}#panel.has-page-issues #skip-to-page-issues:focus{clip:auto;height:auto;margin:0;overflow:visible;padding:5px 7px;white-space:normal;width:auto;z-index:1}.hide-settings-border{border-bottom:0!important;padding:0 15px!important}::-webkit-scrollbar{width:7px}::-webkit-scrollbar-thumb{background-color:var(--sa11y-button-outline);border-radius:6px}*{scrollbar-color:var(--sa11y-button-outline);scrollbar-width:thin}.scrollable:before{animation:fade 1s ease-in-out;background-image:linear-gradient(180deg,transparent 0,transparent 70%,var(--sa11y-panel-scrollable) 100%);background-position:bottom;bottom:auto;content:"";height:250px;left:0;position:absolute;right:0;top:auto;transition:opacity 1s ease-in-out;z-index:-1}#page-issues-content.scrollable:before{height:160px}#panel-alert.scrollable:before{height:200px}@keyframes sa11y-toggle-gradient{0%{background-position:50% 0}50%{background-position:50% 100%}to{background-position:50% 0}}@keyframes fade{0%{opacity:0}to{opacity:1}}@media (prefers-reduced-motion:reduce){*{animation:none!important;transform:none!important;transition:none!important}}#panel{width:375px}#container:lang(en) #panel{width:305px}#container:lang(da) #panel,#container:lang(de) #panel,#container:lang(nb) #panel,#container:lang(pl) #panel,#container:lang(sv) #panel,#container:lang(zh) #panel{width:335px}#container:lang(es) .switch{width:225px!important}#container:not(:lang(en)):not(:lang(de)) .switch{width:205px}'; class ControlPanel extends HTMLElement {connectedCallback() { this.attachShadow({ mode: 'open' }); const e = document.createElement('style'); e.textContent = panelStyles + sharedStyles, this.shadowRoot.appendChild(e); const t = store.getItem('sa11y-remember-contrast') === 'On'; const n = store.getItem('sa11y-remember-labels') === 'On'; const o = store.getItem('sa11y-remember-links-advanced') === 'On'; const a = store.getItem('sa11y-remember-readability') === 'On'; const i = !0 === Constants.Global.checkAllHideToggles; const { panelPosition: s } = Constants.Global; const r = !0 === Constants.Global.contrastPlugin ? `\n      <li id="contrast-item" ${i ? 'hidden' : ''}>\n        <label id="check-contrast" for="contrast-toggle">${Lang._('CONTRAST')}</label>\n        <button id="contrast-toggle"\n          aria-labelledby="check-contrast"\n          class="switch"\n          aria-pressed="${t ? 'true' : 'false'}">${t ? Lang._('ON') : Lang._('OFF')}</button>\n      </li>` : ''; const l = !0 === Constants.Global.formLabelsPlugin ? `\n      <li id="form-labels-item" ${i ? 'hidden' : ''}>\n        <label id="check-labels" for="labels-toggle">${Lang._('FORM_LABELS')}</label>\n        <button id="labels-toggle"\n          aria-labelledby="check-labels"\n          class="switch"\n          aria-pressed="${n ? 'true' : 'false'}">${n ? Lang._('ON') : Lang._('OFF')}</button>\n      </li>` : ''; const d = !0 === Constants.Global.linksAdvancedPlugin ? `\n      <li id="links-advanced-item" ${i ? 'hidden' : ''}>\n        <label id="check-changerequest" for="links-advanced-toggle">${Lang._('LINKS_ADVANCED')} <span class="badge">AAA</span></label>\n        <button id="links-advanced-toggle"\n          aria-labelledby="check-changerequest"\n          class="switch"\n          aria-pressed="${o ? 'true' : 'false'}">${o ? Lang._('ON') : Lang._('OFF')}</button>\n      </li>` : ''; const c = !0 === Constants.Readability.Plugin ? `\n      <li id="readability-item">\n        <label id="check-readability" for="readability-toggle">${Lang._('LANG_READABILITY')} <span class="badge">AAA</span></label>\n        <button id="readability-toggle"\n          aria-labelledby="check-readability"\n          class="switch"\n          aria-pressed="${a ? 'true' : 'false'}">${a ? Lang._('ON') : Lang._('OFF')}</button>\n      </li>` : ''; const p = !0 === Constants.Global.colourFilterPlugin ? `\n      <li id="colour-filter-item">\n        <label id="colour-filter-mode" for="colour-filter">${Lang._('COLOUR_FILTER')}</label>\n        <div class="select-dropdown">\n          <select id="colour-filter-select">\n            <option value="0">${Lang._('OFF')}</option>\n            <option value="1">${Lang._('PROTANOPIA')}</option>\n            <option value="2">${Lang._('DEUTERANOPIA')}</option>\n            <option value="3">${Lang._('TRITANOPIA')}</option>\n            <option value="4">${Lang._('MONOCHROMACY')}</option>\n          </select>\n        </div>\n      </li>` : ''; const u = !0 === Constants.Global.colourFilterPlugin ? `\n      <div id="panel-colour-filters" role="region" aria-labelledby="colour-filter-mode">\n        <div id="filter-icon" class="panel-icon" role="img"></div>\n        <p>${Lang._('COLOUR_FILTER_MESSAGE')}</p>\n      </div>` : ''; const g = `\n      <button type="button" aria-expanded="false" id="toggle" aria-describedby="notification-badge" aria-label="${Lang._('MAIN_TOGGLE_LABEL')}" class="${s}" disabled>\n        <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M256 48c114.953 0 208 93.029 208 208 0 114.953-93.029 208-208 208-114.953 0-208-93.029-208-208 0-114.953 93.029-208 208-208m0-40C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm0 56C149.961 64 64 149.961 64 256s85.961 192 192 192 192-85.961 192-192S362.039 64 256 64zm0 44c19.882 0 36 16.118 36 36s-16.118 36-36 36-36-16.118-36-36 16.118-36 36-36zm117.741 98.023c-28.712 6.779-55.511 12.748-82.14 15.807.851 101.023 12.306 123.052 25.037 155.621 3.617 9.26-.957 19.698-10.217 23.315-9.261 3.617-19.699-.957-23.316-10.217-8.705-22.308-17.086-40.636-22.261-78.549h-9.686c-5.167 37.851-13.534 56.208-22.262 78.549-3.615 9.255-14.05 13.836-23.315 10.217-9.26-3.617-13.834-14.056-10.217-23.315 12.713-32.541 24.185-54.541 25.037-155.621-26.629-3.058-53.428-9.027-82.141-15.807-8.6-2.031-13.926-10.648-11.895-19.249s10.647-13.926 19.249-11.895c96.686 22.829 124.283 22.783 220.775 0 8.599-2.03 17.218 3.294 19.249 11.895 2.029 8.601-3.297 17.219-11.897 19.249z"/></svg>\n        <div id="notification-badge">\n          <span id="notification-count"></span>\n          <span id="notification-text" class="visually-hidden"></span>\n        </div>\n      </button>`; const f = `\n      <div id="page-issues">\n        <div class="panel-header">\n          <h2 id="page-issues-header" tabindex="-1">${Lang._('PAGE_ISSUES')}</h2>\n        </div>\n        <div id="page-issues-content">\n          <ul id="page-issues-list" role="list" aria-labelledby="page-issues-header"></ul>\n        </div>\n      </div>`; const m = `\n      <div id="outline-panel" role="tabpanel" aria-labelledby="outline-header">\n        <div class="panel-header">\n          <h2 id="outline-header" tabindex="-1">${Lang._('OUTLINE')}</h2>\n        </div>\n        <div id="outline-content">\n          <ul\n            id="outline-list"\n            tabindex="0"\n            role="list"\n            aria-labelledby="outline-header"></ul>\n        </div>\n        <div id="readability-panel">\n          <div id="readability-content">\n            <h2 class="header-text-inline">${Lang._('LANG_READABILITY')}</h2>\n            <p id="readability-info"></p>\n            <ul id="readability-details"></ul>\n          </div>\n        </div>\n      </div>`; const b = `\n      <div id="settings-panel" role="tabpanel" aria-labelledby="settings-header">\n        <div class="panel-header">\n          <h2 id="settings-header" tabindex="-1">${Lang._('SETTINGS')}</h2>\n        </div>\n        <div id="settings-content">\n          <ul id="settings-options">\n            ${r}\n            ${l}\n            ${d}\n            ${c}\n            <li id="dark-mode-item">\n              <label id="dark-mode" for="theme-toggle">${Lang._('DARK_MODE')}</label>\n              <button id="theme-toggle"\n                aria-labelledby="dark-mode"\n                class="switch"></button>\n            </li>\n            ${p}\n          </ul>\n        </div>\n      </div>`; const h = `\n      <div\n        id="panel-alert"\n        role="alertdialog"\n        aria-labelledby="alert-heading"\n        aria-describedby="panel-alert-text">\n        <div id="panel-alert-content">\n          <div class="header-text">\n            <button id="close-alert" class="close-btn" aria-label="${Lang._('ALERT_CLOSE')}"></button>\n            <h2 id="alert-heading">${Lang._('ALERT_TEXT')}</h2>\n          </div>\n          <p id="panel-alert-text"></p>\n          <div id="panel-alert-preview"></div>\n        </div>\n      </div>`; const y = `\n      <div id="panel-content">\n        <button id="skip-to-page-issues" type="button">\n          ${Lang._('SKIP_TO_PAGE_ISSUES')}\n        </button>\n        <button id="skip-button" type="button">\n          <div class="panel-icon"></div>\n          <span class="visually-hidden">${Lang._('SHORTCUT_SCREEN_READER')}</span>\n        </button>\n        <button id="dismiss-button" type="button">\n          <div class="dismiss-icon"></div>\n          <span id="dismiss-tooltip" class="visually-hidden"></span>\n        </button>\n        <div id="panel-text">\n          <h1 class="visually-hidden">${Lang._('PANEL_HEADING')}</h1>\n          <p id="status" aria-live="polite"></p>\n        </div>\n      </div>`; const v = `\n      <div id="panel-controls" role="tablist" aria-orientation="horizontal">\n        ${s === 'left' ? '<div style="width:40px"></div>' : ''}\n        <button type="button" role="tab" aria-expanded="false" id="outline-toggle" aria-controls="outline-panel">${Lang._('OUTLINE')}</button>\n        <button type="button" role="tab" aria-expanded="false" id="settings-toggle" aria-controls="settings-panel">${Lang._('SETTINGS')}</button>\n        ${s === 'right' ? '<div style="width:40px"></div>' : ''}\n      </div>`; const x = document.createElement('div'); x.setAttribute('id', 'container'), x.setAttribute('role', 'region'), x.setAttribute('lang', Lang._('LANG_CODE')), x.setAttribute('aria-label', Lang._('CONTAINER_LABEL')), x.setAttribute('dir', Constants.Global.langDirection), x.innerHTML = s === 'top-left' || s === 'top-right' ? `\n        ${g}\n        <div id="panel" class="${s}">\n          ${y}\n          ${u}\n          ${v}\n          ${m}\n          ${b}\n          ${h}\n          ${f}\n        </div>` : `\n        ${g}\n        <div id="panel" class="${s}">\n          ${f}\n          ${m}\n          ${b}\n          ${h}\n          ${u}\n          ${y}\n          ${v}\n        </div>`, this.shadowRoot.appendChild(x), Constants.initializePanelSelectors(); }} function settingsPanelToggles(e, t) { !0 === Constants.Global.contrastPlugin ? Constants.Panel.contrastToggle.onclick = async () => { store.getItem('sa11y-remember-contrast') === 'On' ? (store.setItem('sa11y-remember-contrast', 'Off'), Constants.Panel.contrastToggle.textContent = `${Lang._('OFF')}`, Constants.Panel.contrastToggle.setAttribute('aria-pressed', 'false'), t(!1), await e()) : (store.setItem('sa11y-remember-contrast', 'On'), Constants.Panel.contrastToggle.textContent = `${Lang._('ON')}`, Constants.Panel.contrastToggle.setAttribute('aria-pressed', 'true'), t(!1), await e()); } : store.setItem('sa11y-remember-contrast', 'Off'), !0 === Constants.Global.formLabelsPlugin ? Constants.Panel.labelsToggle.onclick = async () => { store.getItem('sa11y-remember-labels') === 'On' ? (store.setItem('sa11y-remember-labels', 'Off'), Constants.Panel.labelsToggle.textContent = `${Lang._('OFF')}`, Constants.Panel.labelsToggle.setAttribute('aria-pressed', 'false'), t(!1), await e()) : (store.setItem('sa11y-remember-labels', 'On'), Constants.Panel.labelsToggle.textContent = `${Lang._('ON')}`, Constants.Panel.labelsToggle.setAttribute('aria-pressed', 'true'), t(!1), await e()); } : store.setItem('sa11y-remember-labels', 'Off'), !0 === Constants.Global.linksAdvancedPlugin ? Constants.Panel.linksToggle.onclick = async () => { store.getItem('sa11y-remember-links-advanced') === 'On' ? (store.setItem('sa11y-remember-links-advanced', 'Off'), Constants.Panel.linksToggle.textContent = `${Lang._('OFF')}`, Constants.Panel.linksToggle.setAttribute('aria-pressed', 'false'), t(!1), await e()) : (store.setItem('sa11y-remember-links-advanced', 'On'), Constants.Panel.linksToggle.textContent = `${Lang._('ON')}`, Constants.Panel.linksToggle.setAttribute('aria-pressed', 'true'), t(!1), await e()); } : store.setItem('sa11y-remember-links-advanced', 'Off'), !0 === Constants.Readability.Plugin && (Constants.Panel.readabilityToggle.onclick = async () => { store.getItem('sa11y-remember-readability') === 'On' ? (store.setItem('sa11y-remember-readability', 'Off'), Constants.Panel.readabilityToggle.textContent = `${Lang._('OFF')}`, Constants.Panel.readabilityToggle.setAttribute('aria-pressed', 'false'), Constants.Panel.readability.classList.remove('active'), t(!1), await e()) : (store.setItem('sa11y-remember-readability', 'On'), Constants.Panel.readabilityToggle.textContent = `${Lang._('ON')}`, Constants.Panel.readabilityToggle.setAttribute('aria-pressed', 'true'), Constants.Panel.readability.classList.add('active'), t(!1), await e()); }, store.getItem('sa11y-remember-readability') === 'On' && Constants.Panel.readability.classList.add('active')); const n = window.matchMedia('(prefers-color-scheme: dark)'); n.matches ? (Constants.Panel.themeToggle.textContent = `${Lang._('ON')}`, Constants.Panel.themeToggle.setAttribute('aria-pressed', 'true')) : (Constants.Panel.themeToggle.textContent = `${Lang._('OFF')}`, Constants.Panel.themeToggle.setAttribute('aria-pressed', 'false')); n.addEventListener('change', (() => { n.matches ? (Constants.Global.html.setAttribute('data-sa11y-theme', 'dark'), Constants.Panel.themeToggle.textContent = `${Lang._('ON')}`, Constants.Panel.themeToggle.setAttribute('aria-pressed', 'true'), store.setItem('sa11y-remember-theme', '')) : (Constants.Global.html.setAttribute('data-sa11y-theme', 'light'), Constants.Panel.themeToggle.textContent = `${Lang._('OFF')}`, Constants.Panel.themeToggle.setAttribute('aria-pressed', 'false'), store.setItem('sa11y-remember-theme', '')); })), Constants.Panel.themeToggle.onclick = async () => { const e = store.getItem('sa11y-remember-theme'); e === 'dark' ? (Constants.Global.html.setAttribute('data-sa11y-theme', 'light'), store.setItem('sa11y-remember-theme', 'light'), Constants.Panel.themeToggle.textContent = `${Lang._('OFF')}`, Constants.Panel.themeToggle.setAttribute('aria-pressed', 'false')) : e === 'light' ? (Constants.Global.html.setAttribute('data-sa11y-theme', 'dark'), store.setItem('sa11y-remember-theme', 'dark'), Constants.Panel.themeToggle.textContent = `${Lang._('ON')}`, Constants.Panel.themeToggle.setAttribute('aria-pressed', 'true')) : n.matches ? (Constants.Global.html.setAttribute('data-sa11y-theme', 'light'), store.setItem('sa11y-remember-theme', 'light'), Constants.Panel.themeToggle.textContent = `${Lang._('OFF')}`, Constants.Panel.themeToggle.setAttribute('aria-pressed', 'false')) : (Constants.Global.html.setAttribute('data-sa11y-theme', 'dark'), store.setItem('sa11y-remember-theme', 'dark'), Constants.Panel.themeToggle.textContent = `${Lang._('ON')}`, Constants.Panel.themeToggle.setAttribute('aria-pressed', 'true')); }; const o = store.getItem('sa11y-remember-theme'); o === 'dark' ? (Constants.Global.html.setAttribute('data-sa11y-theme', 'dark'), store.setItem('sa11y-remember-theme', 'dark'), Constants.Panel.themeToggle.textContent = `${Lang._('ON')}`, Constants.Panel.themeToggle.setAttribute('aria-pressed', 'true')) : o === 'light' && (Constants.Global.html.setAttribute('data-sa11y-theme', 'light'), store.setItem('sa11y-remember-theme', 'light'), Constants.Panel.themeToggle.textContent = `${Lang._('OFF')}`, Constants.Panel.themeToggle.setAttribute('aria-pressed', 'false')), !0 === Constants.Global.colourFilterPlugin && Constants.Panel.colourFilterSelect.addEventListener('change', (async () => { const n = parseInt(Constants.Panel.colourFilterSelect.value, 10); const o = ['protanopia', 'deuteranopia', 'tritanopia', 'monochromacy']; const a = [Lang._('RED_EYE'), Lang._('GREEN_EYE'), Lang._('BLUE_EYE'), Lang._('MONO_EYE')]; n >= 1 && n <= 4 ? window.matchMedia('(forced-colors: active)').matches ? createAlert(Lang._('COLOUR_FILTER_HIGH_CONTRAST_MESSAGE')) : (Constants.Global.Root.setAttribute('data-sa11y-filter', o[n - 1]), Constants.Panel.colourFilterIcon.setAttribute('aria-label', a[n - 1]), resetAttributes(['data-sa11y-error', 'data-sa11y-warning', 'data-sa11y-good', 'data-sa11y-error-inline', 'data-sa11y-warning-inline', 'data-sa11y-overflow'], 'document'), remove(['sa11y-annotation', 'sa11y-tooltips', 'sa11y-heading-label'], 'document'), Constants.Panel.skipButton.disabled = !0, Constants.Panel.pageIssues.classList.remove('active'), Constants.Global.panelPosition !== 'left' && Constants.Global.panelPosition !== 'right' || Constants.Panel.settingsContent.classList.add('hide-settings-border'), Constants.Panel.colourFilterSelect.classList.add('active'), Constants.Panel.colourPanel.classList.add('active'), Constants.Panel.colourPanel.setAttribute('data-colour', o[n - 1]), Constants.Panel.content.hidden = !0) : (Constants.Global.Root.removeAttribute('data-sa11y-filter'), Constants.Panel.settingsContent.classList.remove('hide-settings-border'), Constants.Panel.colourFilterSelect.classList.remove('active'), Constants.Panel.colourPanel.classList.remove('active'), Constants.Panel.colourPanel.removeAttribute('data-colour'), Constants.Panel.content.hidden = !1, t(!1), await e()); })); } function initializePanelToggles() { Constants.Panel.outlineToggle.addEventListener('click', (() => { if (Constants.Panel.outlineToggle.getAttribute('aria-expanded') === 'true') { Constants.Panel.outlineToggle.classList.remove('outline-active'), Constants.Panel.outline.classList.remove('active'), Constants.Panel.outlineToggle.setAttribute('aria-expanded', 'false'), store.setItem('sa11y-remember-outline', 'Closed'); document.querySelectorAll('sa11y-heading-label').forEach(((e) => e.hidden = !0)), isScrollable(Constants.Panel.outlineList, Constants.Panel.outlineContent); } else { Constants.Panel.outlineToggle.classList.add('outline-active'), Constants.Panel.outline.classList.add('active'), Constants.Panel.outlineToggle.setAttribute('aria-expanded', 'true'), store.setItem('sa11y-remember-outline', 'Opened'); document.querySelectorAll('sa11y-heading-label').forEach(((e) => e.hidden = !1)); }Constants.Panel.outlineHeader.focus(), Constants.Panel.settings.classList.remove('active'), Constants.Panel.settingsToggle.classList.remove('settings-active'), Constants.Panel.settingsToggle.setAttribute('aria-expanded', 'false'), isScrollable(Constants.Panel.outlineList, Constants.Panel.outlineContent); })), store.getItem('sa11y-remember-outline') === 'Opened' && (Constants.Panel.outlineToggle.classList.add('outline-active'), Constants.Panel.outline.classList.add('active'), Constants.Panel.outlineToggle.setAttribute('aria-expanded', 'true'), setTimeout((() => { isScrollable(Constants.Panel.outlineList, Constants.Panel.outlineContent); }), 0)), Constants.Panel.settingsToggle.addEventListener('click', (() => { Constants.Panel.settingsToggle.getAttribute('aria-expanded') === 'true' ? (Constants.Panel.settingsToggle.classList.remove('settings-active'), Constants.Panel.settings.classList.remove('active'), Constants.Panel.settingsToggle.setAttribute('aria-expanded', 'false')) : (Constants.Panel.settingsToggle.classList.add('settings-active'), Constants.Panel.settings.classList.add('active'), Constants.Panel.settingsToggle.setAttribute('aria-expanded', 'true')), Constants.Panel.settingsHeader.focus(); document.querySelectorAll('sa11y-heading-label').forEach(((e) => e.hidden = !0)), Constants.Panel.outline.classList.remove('active'), Constants.Panel.outlineToggle.classList.remove('outline-active'), Constants.Panel.outlineToggle.setAttribute('aria-expanded', 'false'), store.setItem('sa11y-remember-outline', 'Closed'), Constants.Panel.settingsContent.clientHeight > 350 && (Constants.Panel.settingsContent.setAttribute('tabindex', '0'), Constants.Panel.settingsContent.setAttribute('aria-label', `${Lang._('SETTINGS')}`), Constants.Panel.settingsContent.setAttribute('role', 'region')); })), Constants.Panel.skipToPageIssues.addEventListener('click', (() => { Constants.Panel.pageIssuesHeader.focus(); })), setTimeout((() => { isScrollable(Constants.Panel.pageIssuesList, Constants.Panel.pageIssuesContent); }), 0), Constants.Panel.controls.addEventListener('keydown', ((e) => { const t = Constants.Panel.panel.querySelectorAll('#outline-toggle[role=tab], #settings-toggle[role=tab]'); if (e.key === 'ArrowRight') for (let n = 0; n < t.length; n++) if (t[n].getAttribute('aria-expanded') === 'true' || t[n].getAttribute('aria-expanded') === 'false') { t[n + 1].focus(), e.preventDefault(); break; } if (e.key === 'ArrowDown') for (let n = 0; n < t.length; n++) if (t[n].getAttribute('aria-expanded') === 'true' || t[n].getAttribute('aria-expanded') === 'false') { t[n + 1].focus(), e.preventDefault(); break; } if (e.key === 'ArrowLeft') for (let n = t.length - 1; n > 0; n--) if (t[n].getAttribute('aria-expanded') === 'true' || t[n].getAttribute('aria-expanded') === 'false') { t[n - 1].focus(), e.preventDefault(); break; } if (e.key === 'ArrowUp') for (let n = t.length - 1; n > 0; n--) if (t[n].getAttribute('aria-expanded') === 'true' || t[n].getAttribute('aria-expanded') === 'false') { t[n - 1].focus(), e.preventDefault(); break; } })); } function generatePageOutline(e, t) { const n = []; return e.map(((e) => { const n = t.find(((t) => e.key.includes(t.dismiss) && e.href === Constants.Global.currentPage)); return void 0 === n ? '' : n; })).forEach(((e) => { Object.assign(e, { dismissedHeading: !0 }); })), t.forEach(((e) => { const t = e.element; const o = e.headingLevel; const a = e.text; const i = e.index; const s = e.type; const r = e.hidden; const l = e.visibleParent; const d = e.dismissedHeading; let c = []; if (Constants.Exclusions.Outline && (c = Array.from(document.querySelectorAll(Constants.Exclusions.Outline))), !c.includes(t)) { const e = !0 === r ? '<span class="hidden-icon"></span><span class="visually-hidden">Hidden</span>' : ''; const t = !0 === r ? 'class="hidden-h"' : ''; let l; s === 'error' ? (l = `\n        <li class="outline-${o}">\n          <a role="button" id="sa11y-link-${i}" tabindex="-1" ${t}>\n            <span class="badge error-badge">\n            <span aria-hidden="true">${e}\n              <span class="error-icon"></span>\n            </span>\n            <span class="visually-hidden">${Lang._('ERROR')}</span> ${o}</span>\n            <strong class="outline-list-item red-text">${a}</strong>\n          </a>\n        </li>`, n.push(l)) : s !== 'warning' || d ? (l = `\n        <li class="outline-${o}">\n          <a role="button" id="sa11y-link-${i}" tabindex="-1" ${t}>\n            <span class="badge">${e} ${o}</span>\n            <span class="outline-list-item">${a}</span>\n          </a>\n        </li>`, n.push(l)) : (l = `\n        <li class="outline-${o}">\n          <a role="button" id="sa11y-link-${i}" tabindex="-1" ${t}>\n            <span class="badge warning-badge">\n            <span aria-hidden="true">${e} &#x3f;</span>\n            <span class="visually-hidden">${Lang._('WARNING')}</span> ${o}</span>\n            <strong class="outline-list-item yellow-text">${a}</strong>\n          </a>\n        </li>`, n.push(l)); } const p = document.createElement('sa11y-heading-label'); const u = document.createElement('sa11y-heading-anchor'); if (p.hidden = !0, l !== null) { t.insertAdjacentElement('beforeend', p); const e = l.previousElementSibling; u.setAttribute('id', `sa11y-h${i}`), e ? (e.insertAdjacentElement('beforebegin', u), e.setAttribute('data-sa11y-parent', `h${i}`)) : (l.parentNode.insertAdjacentElement('beforebegin', u), l.parentNode.setAttribute('data-sa11y-parent', `h${i}`)); } else t.insertAdjacentElement('beforeend', p), p.insertAdjacentElement('beforebegin', u), u.setAttribute('id', `sa11y-h${i}`); const g = document.createElement('span'); g.classList.add('heading-label'), g.innerHTML = `H${o}`, p.shadowRoot.appendChild(g), store.getItem('sa11y-remember-outline') === 'Opened' && (p.hidden = !1); })), Constants.Panel.outlineList.innerHTML = n.join(' '), setTimeout((() => { const e = document.querySelector('sa11y-control-panel').shadowRoot; const t = Array.from(e.querySelectorAll('#outline-list a')); t.forEach(((t, n) => { const o = e.getElementById(`sa11y-link-${n}`); const a = find(`#sa11y-h${n}, [data-sa11y-parent="h${n}"]`, 'root', Constants.Exclusions.Container); const i = (e) => { (e.type === 'keyup' && e.code === 'Enter' || e.type === 'click') && (a.forEach(((e) => { ((e) => { addPulse(e.parentElement), e.scrollIntoView({ behavior: `${Constants.Global.scrollBehaviour}`, block: 'center' }); })(e); })), o.classList.contains('hidden-h') ? createAlert(`${Lang._('HEADING_NOT_VISIBLE_ALERT')}`) : Constants.Panel.alert.classList.contains('active') && removeAlert()), e.preventDefault(); }; o.addEventListener('click', i, !1), o.addEventListener('keyup', i, !1); })); let n = 0; const o = (e) => { if (!['ArrowUp', 'ArrowDown', 'Space'].includes(e.code)) return; if (e.code === 'Space') return void t[n].click(); let o; t[n].setAttribute('tabindex', -1), e.code === 'ArrowDown' ? (o = n + 1, n === t.length - 1 && (o = 0)) : e.code === 'ArrowUp' && (o = n - 1, n === 0 && (o = t.length - 1)), t[o].setAttribute('tabindex', 0), t[o].focus(), n = o, e.preventDefault(); }; Constants.Panel.outlineList.addEventListener('focus', (() => { t.length > 0 && (Constants.Panel.outlineList.setAttribute('tabindex', -1), t[n].setAttribute('tabindex', 0), t[n].focus()), Constants.Panel.outlineList.addEventListener('keydown', o); })), Constants.Panel.outlineList.addEventListener('blur', (() => { Constants.Panel.outlineList.removeEventListener('keydown', o); })); }), 0), e; } function updatePanel(e, t, n) { if (Constants.Panel.skipButton.disabled = !1, Constants.Panel.panel.classList.add('active'), Constants.Global.html.setAttribute('data-sa11y-active', 'true'), Constants.Panel.skipButton.classList.add('active'), t > 0 && n > 0)Constants.Panel.content.setAttribute('class', 'errors'), Constants.Panel.status.innerHTML = `${Lang._('ERRORS')} <span class="panel-count">${t}</span> ${Lang._('WARNINGS')} <span class="panel-count" id="warning-count">${n}</span>`; else if (t > 0)Constants.Panel.content.setAttribute('class', 'errors'), Constants.Panel.status.innerHTML = `${Lang._('ERRORS')} <span class="panel-count">${t}</span>`; else if (n > 0)Constants.Panel.content.setAttribute('class', 'warnings'), Constants.Panel.status.innerHTML = `${Lang._('WARNINGS')} <span class="panel-count" id="warning-count">${n}</span>`; else { e > 0 ? (Constants.Panel.status.innerHTML = `${Lang._('DISMISSED')} <span class="panel-count">${e}</span>`, Constants.Panel.skipButton.classList.remove('active')) : (Constants.Panel.content.setAttribute('class', 'good'), Constants.Panel.status.innerHTML = `${Lang._('PANEL_STATUS_NONE')}`); document.querySelectorAll('sa11y-annotation').length === 0 && (Constants.Panel.skipButton.disabled = !0); } } function updateBadge(e, t) { const n = e + t; n === 0 ? (Constants.Panel.notifCount.innerText = '', Constants.Panel.notifText.innerText = '', Constants.Panel.notifBadge.style.display = 'none') : t > 0 && e === 0 ? (Constants.Panel.notifBadge.classList.add('notification-badge-warning'), Constants.Panel.notifCount.innerText = `${t}`, Constants.Panel.notifText.innerText = `${Lang._('PANEL_ICON_WARNINGS')}`) : (Constants.Panel.notifBadge.classList.remove('notification-badge-warning'), Constants.Panel.notifCount.innerText = `${n}`, Constants.Panel.notifText.innerText = Lang._('PANEL_ICON_TOTAL')), store.getItem('sa11y-remember-panel') === 'Opened' || n === 0 ? Constants.Panel.notifBadge.style.display = 'none' : Constants.Panel.notifBadge.style.display = 'flex'; } function updateCount(e, t, n) { let o = t; let a = n; return e.forEach(((t, n) => { const i = e[n].type; i === 'error' ? o += 1 : i === 'warning' && (a += 1); })), { error: o, warning: a }; } const top = 'top'; const bottom = 'bottom'; const right = 'right'; const left = 'left'; const auto = 'auto'; const basePlacements = [top, bottom, right, left]; const start = 'start'; const end = 'end'; const clippingParents = 'clippingParents'; const viewport = 'viewport'; const popper = 'popper'; const reference = 'reference'; const variationPlacements = basePlacements.reduce(((e, t) => e.concat([`${t}-${start}`, `${t}-${end}`])), []); const placements = [].concat(basePlacements, [auto]).reduce(((e, t) => e.concat([t, `${t}-${start}`, `${t}-${end}`])), []); const beforeRead = 'beforeRead'; const read = 'read'; const afterRead = 'afterRead'; const beforeMain = 'beforeMain'; const main = 'main'; const afterMain = 'afterMain'; const beforeWrite = 'beforeWrite'; const write = 'write'; const afterWrite = 'afterWrite'; const modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite]; function getNodeName(e) { return e ? (e.nodeName || '').toLowerCase() : null; } function getWindow(e) { if (e == null) return window; if (e.toString() !== '[object Window]') { const t = e.ownerDocument; return t && t.defaultView || window; } return e; } function isElement$1(e) { return e instanceof getWindow(e).Element || e instanceof Element; } function isHTMLElement(e) { return e instanceof getWindow(e).HTMLElement || e instanceof HTMLElement; } function isShadowRoot(e) { return typeof ShadowRoot !== 'undefined' && (e instanceof getWindow(e).ShadowRoot || e instanceof ShadowRoot); } function applyStyles(e) { const t = e.state; Object.keys(t.elements).forEach(((e) => { const n = t.styles[e] || {}; const o = t.attributes[e] || {}; const a = t.elements[e]; isHTMLElement(a) && getNodeName(a) && (Object.assign(a.style, n), Object.keys(o).forEach(((e) => { const t = o[e]; !1 === t ? a.removeAttribute(e) : a.setAttribute(e, !0 === t ? '' : t); }))); })); } function effect$2(e) {
  const t = e.state; const n = {
    popper: {
      position: t.options.strategy, left: '0', top: '0', margin: '0',
    },
    arrow: { position: 'absolute' },
    reference: {},
  }; return Object.assign(t.elements.popper.style, n.popper), t.styles = n, t.elements.arrow && Object.assign(t.elements.arrow.style, n.arrow), function () { Object.keys(t.elements).forEach(((e) => { const o = t.elements[e]; const a = t.attributes[e] || {}; const i = Object.keys(t.styles.hasOwnProperty(e) ? t.styles[e] : n[e]).reduce(((e, t) => (e[t] = '', e)), {}); isHTMLElement(o) && getNodeName(o) && (Object.assign(o.style, i), Object.keys(a).forEach(((e) => { o.removeAttribute(e); }))); })); };
} const applyStyles$1 = {
  name: 'applyStyles', enabled: !0, phase: 'write', fn: applyStyles, effect: effect$2, requires: ['computeStyles'],
}; function getBasePlacement$1(e) { return e.split('-')[0]; } const { max } = Math; const { min } = Math; const
  { round } = Math; function getUAString() { const e = navigator.userAgentData; return e != null && e.brands && Array.isArray(e.brands) ? e.brands.map(((e) => `${e.brand}/${e.version}`)).join(' ') : navigator.userAgent; } function isLayoutViewport() { return !/^((?!chrome|android).)*safari/i.test(getUAString()); } function getBoundingClientRect(e, t, n) {
  void 0 === t && (t = !1), void 0 === n && (n = !1); const o = e.getBoundingClientRect(); let a = 1; let i = 1; t && isHTMLElement(e) && (a = e.offsetWidth > 0 && round(o.width) / e.offsetWidth || 1, i = e.offsetHeight > 0 && round(o.height) / e.offsetHeight || 1); const s = (isElement$1(e) ? getWindow(e) : window).visualViewport; const r = !isLayoutViewport() && n; const l = (o.left + (r && s ? s.offsetLeft : 0)) / a; const d = (o.top + (r && s ? s.offsetTop : 0)) / i; const c = o.width / a; const p = o.height / i; return {
    width: c, height: p, top: d, right: l + c, bottom: d + p, left: l, x: l, y: d,
  };
} function getLayoutRect(e) {
  const t = getBoundingClientRect(e); let n = e.offsetWidth; let o = e.offsetHeight; return Math.abs(t.width - n) <= 1 && (n = t.width), Math.abs(t.height - o) <= 1 && (o = t.height), {
    x: e.offsetLeft, y: e.offsetTop, width: n, height: o,
  };
} function contains(e, t) { const n = t.getRootNode && t.getRootNode(); if (e.contains(t)) return !0; if (n && isShadowRoot(n)) { let o = t; do { if (o && e.isSameNode(o)) return !0; o = o.parentNode || o.host; } while (o); } return !1; } function getComputedStyle$1(e) { return getWindow(e).getComputedStyle(e); } function isTableElement(e) { return ['table', 'td', 'th'].indexOf(getNodeName(e)) >= 0; } function getDocumentElement(e) { return ((isElement$1(e) ? e.ownerDocument : e.document) || window.document).documentElement; } function getParentNode(e) { return getNodeName(e) === 'html' ? e : e.assignedSlot || e.parentNode || (isShadowRoot(e) ? e.host : null) || getDocumentElement(e); } function getTrueOffsetParent(e) { return isHTMLElement(e) && getComputedStyle$1(e).position !== 'fixed' ? e.offsetParent : null; } function getContainingBlock(e) { const t = /firefox/i.test(getUAString()); if (/Trident/i.test(getUAString()) && isHTMLElement(e) && getComputedStyle$1(e).position === 'fixed') return null; let n = getParentNode(e); for (isShadowRoot(n) && (n = n.host); isHTMLElement(n) && ['html', 'body'].indexOf(getNodeName(n)) < 0;) { const o = getComputedStyle$1(n); if (o.transform !== 'none' || o.perspective !== 'none' || o.contain === 'paint' || ['transform', 'perspective'].indexOf(o.willChange) !== -1 || t && o.willChange === 'filter' || t && o.filter && o.filter !== 'none') return n; n = n.parentNode; } return null; } function getOffsetParent(e) { for (var t = getWindow(e), n = getTrueOffsetParent(e); n && isTableElement(n) && getComputedStyle$1(n).position === 'static';)n = getTrueOffsetParent(n); return n && (getNodeName(n) === 'html' || getNodeName(n) === 'body' && getComputedStyle$1(n).position === 'static') ? t : n || getContainingBlock(e) || t; } function getMainAxisFromPlacement(e) { return ['top', 'bottom'].indexOf(e) >= 0 ? 'x' : 'y'; } function within(e, t, n) { return max(e, min(t, n)); } function withinMaxClamp(e, t, n) { const o = within(e, t, n); return o > n ? n : o; } function getFreshSideObject() {
  return {
    top: 0, right: 0, bottom: 0, left: 0,
  };
} function mergePaddingObject(e) { return { ...getFreshSideObject(), ...e }; } function expandToHashMap(e, t) { return t.reduce(((t, n) => (t[n] = e, t)), {}); } const toPaddingObject = function (e, t) { return mergePaddingObject(typeof (e = typeof e === 'function' ? e({ ...t.rects, placement: t.placement }) : e) !== 'number' ? e : expandToHashMap(e, basePlacements)); }; function arrow(e) { let t; const n = e.state; const o = e.name; const a = e.options; const i = n.elements.arrow; const s = n.modifiersData.popperOffsets; const r = getBasePlacement$1(n.placement); const l = getMainAxisFromPlacement(r); const d = [left, right].indexOf(r) >= 0 ? 'height' : 'width'; if (i && s) { const c = toPaddingObject(a.padding, n); const p = getLayoutRect(i); const u = l === 'y' ? top : left; const g = l === 'y' ? bottom : right; const f = n.rects.reference[d] + n.rects.reference[l] - s[l] - n.rects.popper[d]; const m = s[l] - n.rects.reference[l]; const b = getOffsetParent(i); const h = b ? l === 'y' ? b.clientHeight || 0 : b.clientWidth || 0 : 0; const y = f / 2 - m / 2; const v = c[u]; const x = h - p[d] - c[g]; const A = h / 2 - p[d] / 2 + y; const E = within(v, A, x); const L = l; n.modifiersData[o] = ((t = {})[L] = E, t.centerOffset = E - A, t); } } function effect$1(e) { const t = e.state; const n = e.options.element; let o = void 0 === n ? '[data-popper-arrow]' : n; o != null && (typeof o !== 'string' || (o = t.elements.popper.querySelector(o))) && contains(t.elements.popper, o) && (t.elements.arrow = o); } const arrow$1 = {
  name: 'arrow', enabled: !0, phase: 'main', fn: arrow, effect: effect$1, requires: ['popperOffsets'], requiresIfExists: ['preventOverflow'],
}; function getVariation(e) { return e.split('-')[1]; } const unsetSides = {
  top: 'auto', right: 'auto', bottom: 'auto', left: 'auto',
}; function roundOffsetsByDPR(e, t) { const n = e.x; const o = e.y; const a = t.devicePixelRatio || 1; return { x: round(n * a) / a || 0, y: round(o * a) / a || 0 }; } function mapToStyles(e) { let t; const n = e.popper; const o = e.popperRect; const a = e.placement; const i = e.variation; const s = e.offsets; const r = e.position; const l = e.gpuAcceleration; const d = e.adaptive; const c = e.roundOffsets; const p = e.isFixed; const u = s.x; let g = void 0 === u ? 0 : u; const f = s.y; let m = void 0 === f ? 0 : f; const b = typeof c === 'function' ? c({ x: g, y: m }) : { x: g, y: m }; g = b.x, m = b.y; const h = s.hasOwnProperty('x'); const y = s.hasOwnProperty('y'); let v = left; let x = top; const A = window; if (d) { let E = getOffsetParent(n); let L = 'clientHeight'; let C = 'clientWidth'; if (E === getWindow(n) && getComputedStyle$1(E = getDocumentElement(n)).position !== 'static' && r === 'absolute' && (L = 'scrollHeight', C = 'scrollWidth'), a === top || (a === left || a === right) && i === end)x = bottom, m -= (p && E === A && A.visualViewport ? A.visualViewport.height : E[L]) - o.height, m *= l ? 1 : -1; if (a === left || (a === top || a === bottom) && i === end)v = right, g -= (p && E === A && A.visualViewport ? A.visualViewport.width : E[C]) - o.width, g *= l ? 1 : -1; } let w; const T = { position: r, ...d && unsetSides }; const I = !0 === c ? roundOffsetsByDPR({ x: g, y: m }, getWindow(n)) : { x: g, y: m }; return g = I.x, m = I.y, l ? ({ ...T, ...((w = {})[x] = y ? '0' : '', w[v] = h ? '0' : '', w.transform = (A.devicePixelRatio || 1) <= 1 ? `translate(${g}px, ${m}px)` : `translate3d(${g}px, ${m}px, 0)`, w) }) : ({ ...T, ...((t = {})[x] = y ? `${m}px` : '', t[v] = h ? `${g}px` : '', t.transform = '', t) }); } function computeStyles(e) {
  const t = e.state; const n = e.options; const o = n.gpuAcceleration; const a = void 0 === o || o; const i = n.adaptive; const s = void 0 === i || i; const r = n.roundOffsets; const l = void 0 === r || r; const d = {
    placement: getBasePlacement$1(t.placement), variation: getVariation(t.placement), popper: t.elements.popper, popperRect: t.rects.popper, gpuAcceleration: a, isFixed: t.options.strategy === 'fixed',
  }; t.modifiersData.popperOffsets != null && (t.styles.popper = {
    ...t.styles.popper,
    ...mapToStyles({
      ...d, offsets: t.modifiersData.popperOffsets, position: t.options.strategy, adaptive: s, roundOffsets: l,
    }),
  }), t.modifiersData.arrow != null && (t.styles.arrow = {
    ...t.styles.arrow,
    ...mapToStyles({
      ...d, offsets: t.modifiersData.arrow, position: 'absolute', adaptive: !1, roundOffsets: l,
    }),
  }), t.attributes.popper = { ...t.attributes.popper, 'data-popper-placement': t.placement };
} const computeStyles$1 = {
  name: 'computeStyles', enabled: !0, phase: 'beforeWrite', fn: computeStyles, data: {},
}; const passive = { passive: !0 }; function effect(e) { const t = e.state; const n = e.instance; const o = e.options; const a = o.scroll; const i = void 0 === a || a; const s = o.resize; const r = void 0 === s || s; const l = getWindow(t.elements.popper); const d = [].concat(t.scrollParents.reference, t.scrollParents.popper); return i && d.forEach(((e) => { e.addEventListener('scroll', n.update, passive); })), r && l.addEventListener('resize', n.update, passive), function () { i && d.forEach(((e) => { e.removeEventListener('scroll', n.update, passive); })), r && l.removeEventListener('resize', n.update, passive); }; } const eventListeners = {
  name: 'eventListeners', enabled: !0, phase: 'write', fn() {}, effect, data: {},
}; const hash$1 = {
  left: 'right', right: 'left', bottom: 'top', top: 'bottom',
}; function getOppositePlacement(e) { return e.replace(/left|right|bottom|top/g, ((e) => hash$1[e])); } const hash = { start: 'end', end: 'start' }; function getOppositeVariationPlacement(e) { return e.replace(/start|end/g, ((e) => hash[e])); } function getWindowScroll(e) { const t = getWindow(e); return { scrollLeft: t.pageXOffset, scrollTop: t.pageYOffset }; } function getWindowScrollBarX(e) { return getBoundingClientRect(getDocumentElement(e)).left + getWindowScroll(e).scrollLeft; } function getViewportRect(e, t) {
  const n = getWindow(e); const o = getDocumentElement(e); const a = n.visualViewport; let i = o.clientWidth; let s = o.clientHeight; let r = 0; let l = 0; if (a) { i = a.width, s = a.height; const d = isLayoutViewport(); (d || !d && t === 'fixed') && (r = a.offsetLeft, l = a.offsetTop); } return {
    width: i, height: s, x: r + getWindowScrollBarX(e), y: l,
  };
} function getDocumentRect(e) {
  let t; const n = getDocumentElement(e); const o = getWindowScroll(e); const a = (t = e.ownerDocument) == null ? void 0 : t.body; const i = max(n.scrollWidth, n.clientWidth, a ? a.scrollWidth : 0, a ? a.clientWidth : 0); const s = max(n.scrollHeight, n.clientHeight, a ? a.scrollHeight : 0, a ? a.clientHeight : 0); let r = -o.scrollLeft + getWindowScrollBarX(e); const l = -o.scrollTop; return getComputedStyle$1(a || n).direction === 'rtl' && (r += max(n.clientWidth, a ? a.clientWidth : 0) - i), {
    width: i, height: s, x: r, y: l,
  };
} function isScrollParent(e) { const t = getComputedStyle$1(e); const n = t.overflow; const o = t.overflowX; const a = t.overflowY; return /auto|scroll|overlay|hidden/.test(n + a + o); } function getScrollParent(e) { return ['html', 'body', '#document'].indexOf(getNodeName(e)) >= 0 ? e.ownerDocument.body : isHTMLElement(e) && isScrollParent(e) ? e : getScrollParent(getParentNode(e)); } function listScrollParents(e, t) { let n; void 0 === t && (t = []); const o = getScrollParent(e); const a = o === ((n = e.ownerDocument) == null ? void 0 : n.body); const i = getWindow(o); const s = a ? [i].concat(i.visualViewport || [], isScrollParent(o) ? o : []) : o; const r = t.concat(s); return a ? r : r.concat(listScrollParents(getParentNode(s))); } function rectToClientRect(e) {
  return {
    ...e, left: e.x, top: e.y, right: e.x + e.width, bottom: e.y + e.height,
  };
} function getInnerBoundingClientRect(e, t) { const n = getBoundingClientRect(e, !1, t === 'fixed'); return n.top += e.clientTop, n.left += e.clientLeft, n.bottom = n.top + e.clientHeight, n.right = n.left + e.clientWidth, n.width = e.clientWidth, n.height = e.clientHeight, n.x = n.left, n.y = n.top, n; } function getClientRectFromMixedType(e, t, n) { return t === viewport ? rectToClientRect(getViewportRect(e, n)) : isElement$1(t) ? getInnerBoundingClientRect(t, n) : rectToClientRect(getDocumentRect(getDocumentElement(e))); } function getClippingParents(e) { const t = listScrollParents(getParentNode(e)); const n = ['absolute', 'fixed'].indexOf(getComputedStyle$1(e).position) >= 0 && isHTMLElement(e) ? getOffsetParent(e) : e; return isElement$1(n) ? t.filter(((e) => isElement$1(e) && contains(e, n) && getNodeName(e) !== 'body')) : []; } function getClippingRect(e, t, n, o) { const a = t === 'clippingParents' ? getClippingParents(e) : [].concat(t); const i = [].concat(a, [n]); const s = i[0]; const r = i.reduce(((t, n) => { const a = getClientRectFromMixedType(e, n, o); return t.top = max(a.top, t.top), t.right = min(a.right, t.right), t.bottom = min(a.bottom, t.bottom), t.left = max(a.left, t.left), t; }), getClientRectFromMixedType(e, s, o)); return r.width = r.right - r.left, r.height = r.bottom - r.top, r.x = r.left, r.y = r.top, r; } function computeOffsets(e) { let t; const n = e.reference; const o = e.element; const a = e.placement; const i = a ? getBasePlacement$1(a) : null; const s = a ? getVariation(a) : null; const r = n.x + n.width / 2 - o.width / 2; const l = n.y + n.height / 2 - o.height / 2; switch (i) { case top: t = { x: r, y: n.y - o.height }; break; case bottom: t = { x: r, y: n.y + n.height }; break; case right: t = { x: n.x + n.width, y: l }; break; case left: t = { x: n.x - o.width, y: l }; break; default: t = { x: n.x, y: n.y }; } const d = i ? getMainAxisFromPlacement(i) : null; if (d != null) { const c = d === 'y' ? 'height' : 'width'; switch (s) { case start: t[d] = t[d] - (n[c] / 2 - o[c] / 2); break; case end: t[d] = t[d] + (n[c] / 2 - o[c] / 2); } } return t; } function detectOverflow$1(e, t) {
  void 0 === t && (t = {}); const n = t; const o = n.placement; const a = void 0 === o ? e.placement : o; const i = n.strategy; const s = void 0 === i ? e.strategy : i; const r = n.boundary; const l = void 0 === r ? clippingParents : r; const d = n.rootBoundary; const c = void 0 === d ? viewport : d; const p = n.elementContext; const u = void 0 === p ? popper : p; const g = n.altBoundary; const f = void 0 !== g && g; const m = n.padding; const b = void 0 === m ? 0 : m; const h = mergePaddingObject(typeof b !== 'number' ? b : expandToHashMap(b, basePlacements)); const y = u === popper ? reference : popper; const v = e.rects.popper; const x = e.elements[f ? y : u]; const A = getClippingRect(isElement$1(x) ? x : x.contextElement || getDocumentElement(e.elements.popper), l, c, s); const E = getBoundingClientRect(e.elements.reference); const L = computeOffsets({
    reference: E, element: v, strategy: 'absolute', placement: a,
  }); const C = rectToClientRect({ ...v, ...L }); const w = u === popper ? C : E; const T = {
    top: A.top - w.top + h.top, bottom: w.bottom - A.bottom + h.bottom, left: A.left - w.left + h.left, right: w.right - A.right + h.right,
  }; const I = e.modifiersData.offset; if (u === popper && I) { const S = I[a]; Object.keys(T).forEach(((e) => { const t = [right, bottom].indexOf(e) >= 0 ? 1 : -1; const n = [top, bottom].indexOf(e) >= 0 ? 'y' : 'x'; T[e] += S[n] * t; })); } return T;
} function computeAutoPlacement(e, t) {
  void 0 === t && (t = {}); const n = t; const o = n.placement; const a = n.boundary; const i = n.rootBoundary; const s = n.padding; const r = n.flipVariations; const l = n.allowedAutoPlacements; const d = void 0 === l ? placements : l; const c = getVariation(o); const p = c ? r ? variationPlacements : variationPlacements.filter(((e) => getVariation(e) === c)) : basePlacements; let u = p.filter(((e) => d.indexOf(e) >= 0)); u.length === 0 && (u = p); const g = u.reduce(((t, n) => (t[n] = detectOverflow$1(e, {
    placement: n, boundary: a, rootBoundary: i, padding: s,
  })[getBasePlacement$1(n)], t)), {}); return Object.keys(g).sort(((e, t) => g[e] - g[t]));
} function getExpandedFallbackPlacements(e) { if (getBasePlacement$1(e) === auto) return []; const t = getOppositePlacement(e); return [getOppositeVariationPlacement(e), t, getOppositeVariationPlacement(t)]; } function flip(e) {
  const t = e.state; const n = e.options; const o = e.name; if (!t.modifiersData[o]._skip) {
    for (var a = n.mainAxis, i = void 0 === a || a, s = n.altAxis, r = void 0 === s || s, l = n.fallbackPlacements, d = n.padding, c = n.boundary, p = n.rootBoundary, u = n.altBoundary, g = n.flipVariations, f = void 0 === g || g, m = n.allowedAutoPlacements, b = t.options.placement, h = getBasePlacement$1(b), y = l || (h === b || !f ? [getOppositePlacement(b)] : getExpandedFallbackPlacements(b)), v = [b].concat(y).reduce(((e, n) => e.concat(getBasePlacement$1(n) === auto ? computeAutoPlacement(t, {
        placement: n, boundary: c, rootBoundary: p, padding: d, flipVariations: f, allowedAutoPlacements: m,
      }) : n)), []), x = t.rects.reference, A = t.rects.popper, E = new Map(), L = !0, C = v[0], w = 0; w < v.length; w++) {
      const T = v[w]; const I = getBasePlacement$1(T); const S = getVariation(T) === start; const P = [top, bottom].indexOf(I) >= 0; const k = P ? 'width' : 'height'; const O = detectOverflow$1(t, {
        placement: T, boundary: c, rootBoundary: p, altBoundary: u, padding: d,
      }); let _ = P ? S ? right : left : S ? bottom : top; x[k] > A[k] && (_ = getOppositePlacement(_)); const N = getOppositePlacement(_); const $ = []; if (i && $.push(O[I] <= 0), r && $.push(O[_] <= 0, O[N] <= 0), $.every(((e) => e))) { C = T, L = !1; break; }E.set(T, $);
    } if (L) for (let R = function (e) { const t = v.find(((t) => { const n = E.get(t); if (n) return n.slice(0, e).every(((e) => e)); })); if (t) return C = t, 'break'; }, D = f ? 3 : 1; D > 0; D--) { if (R(D) === 'break') break; }t.placement !== C && (t.modifiersData[o]._skip = !0, t.placement = C, t.reset = !0);
  }
} const flip$1 = {
  name: 'flip', enabled: !0, phase: 'main', fn: flip, requiresIfExists: ['offset'], data: { _skip: !1 },
}; function getSideOffsets(e, t, n) {
  return void 0 === n && (n = { x: 0, y: 0 }), {
    top: e.top - t.height - n.y, right: e.right - t.width + n.x, bottom: e.bottom - t.height + n.y, left: e.left - t.width - n.x,
  };
} function isAnySideFullyClipped(e) { return [top, right, bottom, left].some(((t) => e[t] >= 0)); } function hide(e) {
  const t = e.state; const n = e.name; const o = t.rects.reference; const a = t.rects.popper; const i = t.modifiersData.preventOverflow; const s = detectOverflow$1(t, { elementContext: 'reference' }); const r = detectOverflow$1(t, { altBoundary: !0 }); const l = getSideOffsets(s, o); const d = getSideOffsets(r, a, i); const c = isAnySideFullyClipped(l); const p = isAnySideFullyClipped(d); t.modifiersData[n] = {
    referenceClippingOffsets: l, popperEscapeOffsets: d, isReferenceHidden: c, hasPopperEscaped: p,
  }, t.attributes.popper = { ...t.attributes.popper, 'data-popper-reference-hidden': c, 'data-popper-escaped': p };
} const hide$1 = {
  name: 'hide', enabled: !0, phase: 'main', requiresIfExists: ['preventOverflow'], fn: hide,
}; function distanceAndSkiddingToXY(e, t, n) { const o = getBasePlacement$1(e); const a = [left, top].indexOf(o) >= 0 ? -1 : 1; const i = typeof n === 'function' ? n({ ...t, placement: e }) : n; let s = i[0]; let r = i[1]; return s = s || 0, r = (r || 0) * a, [left, right].indexOf(o) >= 0 ? { x: r, y: s } : { x: s, y: r }; } function offset(e) { const t = e.state; const n = e.options; const o = e.name; const a = n.offset; const i = void 0 === a ? [0, 0] : a; const s = placements.reduce(((e, n) => (e[n] = distanceAndSkiddingToXY(n, t.rects, i), e)), {}); const r = s[t.placement]; const l = r.x; const d = r.y; t.modifiersData.popperOffsets != null && (t.modifiersData.popperOffsets.x += l, t.modifiersData.popperOffsets.y += d), t.modifiersData[o] = s; } const offset$1 = {
  name: 'offset', enabled: !0, phase: 'main', requires: ['popperOffsets'], fn: offset,
}; function popperOffsets(e) {
  const t = e.state; const n = e.name; t.modifiersData[n] = computeOffsets({
    reference: t.rects.reference, element: t.rects.popper, strategy: 'absolute', placement: t.placement,
  });
} const popperOffsets$1 = {
  name: 'popperOffsets', enabled: !0, phase: 'read', fn: popperOffsets, data: {},
}; function getAltAxis(e) { return e === 'x' ? 'y' : 'x'; } function preventOverflow(e) {
  const t = e.state; const n = e.options; const o = e.name; const a = n.mainAxis; const i = void 0 === a || a; const s = n.altAxis; const r = void 0 !== s && s; const l = n.boundary; const d = n.rootBoundary; const c = n.altBoundary; const p = n.padding; const u = n.tether; const g = void 0 === u || u; const f = n.tetherOffset; const m = void 0 === f ? 0 : f; const b = detectOverflow$1(t, {
    boundary: l, rootBoundary: d, padding: p, altBoundary: c,
  }); const h = getBasePlacement$1(t.placement); const y = getVariation(t.placement); const v = !y; const x = getMainAxisFromPlacement(h); const A = getAltAxis(x); const E = t.modifiersData.popperOffsets; const L = t.rects.reference; const C = t.rects.popper; const w = typeof m === 'function' ? m({ ...t.rects, placement: t.placement }) : m; const T = typeof w === 'number' ? { mainAxis: w, altAxis: w } : ({ mainAxis: 0, altAxis: 0, ...w }); const I = t.modifiersData.offset ? t.modifiersData.offset[t.placement] : null; const S = { x: 0, y: 0 }; if (E) { if (i) { let P; const k = x === 'y' ? top : left; const O = x === 'y' ? bottom : right; const _ = x === 'y' ? 'height' : 'width'; const N = E[x]; const $ = N + b[k]; const R = N - b[O]; const D = g ? -C[_] / 2 : 0; const M = y === start ? L[_] : C[_]; const B = y === start ? -C[_] : -L[_]; const H = t.elements.arrow; const G = g && H ? getLayoutRect(H) : { width: 0, height: 0 }; const F = t.modifiersData['arrow#persistent'] ? t.modifiersData['arrow#persistent'].padding : getFreshSideObject(); const z = F[k]; const V = F[O]; const W = within(0, L[_], G[_]); const U = v ? L[_] / 2 - D - W - z - T.mainAxis : M - W - z - T.mainAxis; const j = v ? -L[_] / 2 + D + W + V + T.mainAxis : B + W + V + T.mainAxis; const q = t.elements.arrow && getOffsetParent(t.elements.arrow); const K = q ? x === 'y' ? q.clientTop || 0 : q.clientLeft || 0 : 0; const Q = (P = I == null ? void 0 : I[x]) != null ? P : 0; const Y = N + j - Q; const X = within(g ? min($, N + U - Q - K) : $, N, g ? max(R, Y) : R); E[x] = X, S[x] = X - N; } if (r) { let Z; const J = x === 'x' ? top : left; const ee = x === 'x' ? bottom : right; const te = E[A]; const ne = A === 'y' ? 'height' : 'width'; const oe = te + b[J]; const ae = te - b[ee]; const ie = [top, left].indexOf(h) !== -1; const se = (Z = I == null ? void 0 : I[A]) != null ? Z : 0; const re = ie ? oe : te - L[ne] - C[ne] - se + T.altAxis; const le = ie ? te + L[ne] + C[ne] - se - T.altAxis : ae; const de = g && ie ? withinMaxClamp(re, te, le) : within(g ? re : oe, te, g ? le : ae); E[A] = de, S[A] = de - te; }t.modifiersData[o] = S; }
} const preventOverflow$1 = {
  name: 'preventOverflow', enabled: !0, phase: 'main', fn: preventOverflow, requiresIfExists: ['offset'],
}; function getHTMLElementScroll(e) { return { scrollLeft: e.scrollLeft, scrollTop: e.scrollTop }; } function getNodeScroll(e) { return e !== getWindow(e) && isHTMLElement(e) ? getHTMLElementScroll(e) : getWindowScroll(e); } function isElementScaled(e) { const t = e.getBoundingClientRect(); const n = round(t.width) / e.offsetWidth || 1; const o = round(t.height) / e.offsetHeight || 1; return n !== 1 || o !== 1; } function getCompositeRect(e, t, n) {
  void 0 === n && (n = !1); const o = isHTMLElement(t); const a = isHTMLElement(t) && isElementScaled(t); const i = getDocumentElement(t); const s = getBoundingClientRect(e, a, n); let r = { scrollLeft: 0, scrollTop: 0 }; let l = { x: 0, y: 0 }; return (o || !o && !n) && ((getNodeName(t) !== 'body' || isScrollParent(i)) && (r = getNodeScroll(t)), isHTMLElement(t) ? ((l = getBoundingClientRect(t, !0)).x += t.clientLeft, l.y += t.clientTop) : i && (l.x = getWindowScrollBarX(i))), {
    x: s.left + r.scrollLeft - l.x, y: s.top + r.scrollTop - l.y, width: s.width, height: s.height,
  };
} function order(e) {
  const t = new Map(); const n = new Set(); const
    o = []; function a(e) { n.add(e.name), [].concat(e.requires || [], e.requiresIfExists || []).forEach(((e) => { if (!n.has(e)) { const o = t.get(e); o && a(o); } })), o.push(e); } return e.forEach(((e) => { t.set(e.name, e); })), e.forEach(((e) => { n.has(e.name) || a(e); })), o;
} function orderModifiers(e) { const t = order(e); return modifierPhases.reduce(((e, n) => e.concat(t.filter(((e) => e.phase === n)))), []); } function debounce$1(e) { let t; return function () { return t || (t = new Promise(((n) => { Promise.resolve().then((() => { t = void 0, n(e()); })); }))), t; }; } function mergeByName(e) {
  const t = e.reduce(((e, t) => {
    const n = e[t.name]; return e[t.name] = n ? ({
      ...n, ...t, options: { ...n.options, ...t.options }, data: { ...n.data, ...t.data },
    }) : t, e;
  }), {}); return Object.keys(t).map(((e) => t[e]));
} const DEFAULT_OPTIONS = { placement: 'bottom', modifiers: [], strategy: 'absolute' }; function areValidElements() { for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n]; return !t.some(((e) => !(e && typeof e.getBoundingClientRect === 'function'))); } function popperGenerator(e) {
  void 0 === e && (e = {}); const t = e; const n = t.defaultModifiers; const o = void 0 === n ? [] : n; const a = t.defaultOptions; const i = void 0 === a ? DEFAULT_OPTIONS : a; return function (e, t, n) {
    void 0 === n && (n = i); let a = {
      placement: 'bottom', orderedModifiers: [], options: { ...DEFAULT_OPTIONS, ...i }, modifiersData: {}, elements: { reference: e, popper: t }, attributes: {}, styles: {},
    }; let s = []; let r = !1; var l = {
      state: a,
      setOptions(n) {
        const r = typeof n === 'function' ? n(a.options) : n; d(), a.options = { ...i, ...a.options, ...r }, a.scrollParents = { reference: isElement$1(e) ? listScrollParents(e) : e.contextElement ? listScrollParents(e.contextElement) : [], popper: listScrollParents(t) }; const c = orderModifiers(mergeByName([].concat(o, a.options.modifiers))); return a.orderedModifiers = c.filter(((e) => e.enabled)), a.orderedModifiers.forEach(((e) => {
          const t = e.name; const n = e.options; const o = void 0 === n ? {} : n; const i = e.effect; if (typeof i === 'function') {
            const r = i({
              state: a, name: t, instance: l, options: o,
            }); const d = function () {}; s.push(r || d);
          }
        })), l.update();
      },
      forceUpdate() {
        if (!r) {
          const e = a.elements; const t = e.reference; const n = e.popper; if (areValidElements(t, n)) {
            a.rects = { reference: getCompositeRect(t, getOffsetParent(n), a.options.strategy === 'fixed'), popper: getLayoutRect(n) }, a.reset = !1, a.placement = a.options.placement, a.orderedModifiers.forEach(((e) => a.modifiersData[e.name] = { ...e.data })); for (let o = 0; o < a.orderedModifiers.length; o++) {
              if (!0 !== a.reset) {
                const i = a.orderedModifiers[o]; const s = i.fn; const d = i.options; const c = void 0 === d ? {} : d; const p = i.name; typeof s === 'function' && (a = s({
                  state: a, options: c, name: p, instance: l,
                }) || a);
              } else a.reset = !1, o = -1;
            }
          }
        }
      },
      update: debounce$1((() => new Promise(((e) => { l.forceUpdate(), e(a); })))),
      destroy() { d(), r = !0; },
    }; if (!areValidElements(e, t)) return l; function d() { s.forEach(((e) => e())), s = []; } return l.setOptions(n).then(((e) => { !r && n.onFirstUpdate && n.onFirstUpdate(e); })), l;
  };
} const defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1]; const createPopper = popperGenerator({ defaultModifiers }); const BOX_CLASS = 'tippy-box'; const CONTENT_CLASS = 'tippy-content'; const BACKDROP_CLASS = 'tippy-backdrop'; const ARROW_CLASS = 'tippy-arrow'; const SVG_ARROW_CLASS = 'tippy-svg-arrow'; const TOUCH_OPTIONS = { passive: !0, capture: !0 }; const TIPPY_DEFAULT_APPEND_TO = function () { return document.body; }; function getValueAtIndexOrReturn(e, t, n) { if (Array.isArray(e)) { const o = e[t]; return o == null ? Array.isArray(n) ? n[t] : n : o; } return e; } function isType(e, t) { const n = {}.toString.call(e); return n.indexOf('[object') === 0 && n.indexOf(`${t}]`) > -1; } function invokeWithArgsOrReturn(e, t) { return typeof e === 'function' ? e.apply(void 0, t) : e; } function debounce(e, t) { return t === 0 ? e : function (o) { clearTimeout(n), n = setTimeout((() => { e(o); }), t); }; let n; } function splitBySpaces(e) { return e.split(/\s+/).filter(Boolean); } function normalizeToArray(e) { return [].concat(e); } function pushIfUnique(e, t) { e.indexOf(t) === -1 && e.push(t); } function unique(e) { return e.filter(((t, n) => e.indexOf(t) === n)); } function getBasePlacement(e) { return e.split('-')[0]; } function arrayFrom(e) { return [].slice.call(e); } function removeUndefinedProps(e) { return Object.keys(e).reduce(((t, n) => (void 0 !== e[n] && (t[n] = e[n]), t)), {}); } function div() { return document.createElement('div'); } function isElement(e) { return ['Element', 'Fragment'].some(((t) => isType(e, t))); } function isNodeList(e) { return isType(e, 'NodeList'); } function isMouseEvent(e) { return isType(e, 'MouseEvent'); } function isReferenceElement(e) { return !(!e || !e._tippy || e._tippy.reference !== e); } function getArrayOfElements(e) { return isElement(e) ? [e] : isNodeList(e) ? arrayFrom(e) : Array.isArray(e) ? e : arrayFrom(document.querySelectorAll(e)); } function setTransitionDuration(e, t) { e.forEach(((e) => { e && (e.style.transitionDuration = `${t}ms`); })); } function setVisibilityState(e, t) { e.forEach(((e) => { e && e.setAttribute('data-state', t); })); } function getOwnerDocument(e) { let t; const n = normalizeToArray(e)[0]; return n != null && (t = n.ownerDocument) != null && t.body ? n.ownerDocument : document; } function isCursorOutsideInteractiveBorder(e, t) { const n = t.clientX; const o = t.clientY; return e.every(((e) => { const t = e.popperRect; const a = e.popperState; const i = e.props.interactiveBorder; const s = getBasePlacement(a.placement); const r = a.modifiersData.offset; if (!r) return !0; const l = s === 'bottom' ? r.top.y : 0; const d = s === 'top' ? r.bottom.y : 0; const c = s === 'right' ? r.left.x : 0; const p = s === 'left' ? r.right.x : 0; const u = t.top - o + l > i; const g = o - t.bottom - d > i; const f = t.left - n + c > i; const m = n - t.right - p > i; return u || g || f || m; })); } function updateTransitionEndListener(e, t, n) { const o = `${t}EventListener`; ['transitionend', 'webkitTransitionEnd'].forEach(((t) => { e[o](t, n); })); } function actualContains(e, t) { for (let n = t; n;) { var o; if (e.contains(n)) return !0; n = n.getRootNode == null || (o = n.getRootNode()) == null ? void 0 : o.host; } return !1; } const currentInput = { isTouch: !1 }; let lastMouseMoveTime = 0; function onDocumentTouchStart() { currentInput.isTouch || (currentInput.isTouch = !0, window.performance && document.addEventListener('mousemove', onDocumentMouseMove)); } function onDocumentMouseMove() { const e = performance.now(); e - lastMouseMoveTime < 20 && (currentInput.isTouch = !1, document.removeEventListener('mousemove', onDocumentMouseMove)), lastMouseMoveTime = e; } function onWindowBlur() { const e = document.activeElement; if (isReferenceElement(e)) { const t = e._tippy; e.blur && !t.state.isVisible && e.blur(); } } function bindGlobalEventListeners() { document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS), window.addEventListener('blur', onWindowBlur); } const isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined'; const isIE11 = !!isBrowser && !!window.msCrypto; const pluginProps = {
  animateFill: !1, followCursor: !1, inlinePositioning: !1, sticky: !1,
}; const renderProps = {
  allowHTML: !1, animation: 'fade', arrow: !0, content: '', inertia: !1, maxWidth: 350, role: 'tooltip', theme: '', zIndex: 9999,
}; const defaultProps = {
  appendTo: TIPPY_DEFAULT_APPEND_TO, aria: { content: 'auto', expanded: 'auto' }, delay: 0, duration: [300, 250], getReferenceClientRect: null, hideOnClick: !0, ignoreAttributes: !1, interactive: !1, interactiveBorder: 2, interactiveDebounce: 0, moveTransition: '', offset: [0, 10], onAfterUpdate() {}, onBeforeUpdate() {}, onCreate() {}, onDestroy() {}, onHidden() {}, onHide() {}, onMount() {}, onShow() {}, onShown() {}, onTrigger() {}, onUntrigger() {}, onClickOutside() {}, placement: 'top', plugins: [], popperOptions: {}, render: null, showOnCreate: !1, touch: !0, trigger: 'mouseenter focus', triggerTarget: null, ...pluginProps, ...renderProps,
}; const defaultKeys = Object.keys(defaultProps); const setDefaultProps = function (e) { Object.keys(e).forEach(((t) => { defaultProps[t] = e[t]; })); }; function getExtendedPassedProps(e) { const t = (e.plugins || []).reduce(((t, n) => { let o; const a = n.name; const i = n.defaultValue; a && (t[a] = void 0 !== e[a] ? e[a] : (o = defaultProps[a]) != null ? o : i); return t; }), {}); return { ...e, ...t }; } function getDataAttributeProps(e, t) { return (t ? Object.keys(getExtendedPassedProps({ ...defaultProps, plugins: t })) : defaultKeys).reduce(((t, n) => { const o = (e.getAttribute(`data-tippy-${n}`) || '').trim(); if (!o) return t; if (n === 'content')t[n] = o; else try { t[n] = JSON.parse(o); } catch (e) { t[n] = o; } return t; }), {}); } function evaluateProps(e, t) { const n = { ...t, content: invokeWithArgsOrReturn(t.content, [e]), ...(t.ignoreAttributes ? {} : getDataAttributeProps(e, t.plugins)) }; return n.aria = { ...defaultProps.aria, ...n.aria }, n.aria = { expanded: n.aria.expanded === 'auto' ? t.interactive : n.aria.expanded, content: n.aria.content === 'auto' ? t.interactive ? null : 'describedby' : n.aria.content }, n; } const innerHTML = function () { return 'innerHTML'; }; function dangerouslySetInnerHTML(e, t) { e[innerHTML()] = t; } function createArrowElement(e) { const t = div(); return !0 === e ? t.className = ARROW_CLASS : (t.className = SVG_ARROW_CLASS, isElement(e) ? t.appendChild(e) : dangerouslySetInnerHTML(t, e)), t; } function setContent(e, t) { isElement(t.content) ? (dangerouslySetInnerHTML(e, ''), e.appendChild(t.content)) : typeof t.content !== 'function' && (t.allowHTML ? dangerouslySetInnerHTML(e, t.content) : e.textContent = t.content); } function getChildren(e) {
  const t = e.firstElementChild; const n = arrayFrom(t.children); return {
    box: t, content: n.find(((e) => e.classList.contains(CONTENT_CLASS))), arrow: n.find(((e) => e.classList.contains(ARROW_CLASS) || e.classList.contains(SVG_ARROW_CLASS))), backdrop: n.find(((e) => e.classList.contains(BACKDROP_CLASS))),
  };
} function render(e) { const t = div(); const n = div(); n.className = BOX_CLASS, n.setAttribute('data-state', 'hidden'), n.setAttribute('tabindex', '-1'); const o = div(); function a(n, o) { const a = getChildren(t); const i = a.box; const s = a.content; const r = a.arrow; o.theme ? i.setAttribute('data-theme', o.theme) : i.removeAttribute('data-theme'), typeof o.animation === 'string' ? i.setAttribute('data-animation', o.animation) : i.removeAttribute('data-animation'), o.inertia ? i.setAttribute('data-inertia', '') : i.removeAttribute('data-inertia'), i.style.maxWidth = typeof o.maxWidth === 'number' ? `${o.maxWidth}px` : o.maxWidth, o.role ? i.setAttribute('role', o.role) : i.removeAttribute('role'), n.content === o.content && n.allowHTML === o.allowHTML || setContent(s, e.props), o.arrow ? r ? n.arrow !== o.arrow && (i.removeChild(r), i.appendChild(createArrowElement(o.arrow))) : i.appendChild(createArrowElement(o.arrow)) : r && i.removeChild(r); } return o.className = CONTENT_CLASS, o.setAttribute('data-state', 'hidden'), setContent(o, e.props), t.appendChild(n), n.appendChild(o), a(e.props, e.props), { popper: t, onUpdate: a }; }render.$$tippy = !0; let idCounter = 1; let mouseMoveListeners = []; let mountedInstances = []; function createTippy(e, t) {
  let n; let o; let a; let i; let s; let r; let l; const d = evaluateProps(e, { ...defaultProps, ...getExtendedPassedProps(removeUndefinedProps(t)) }); let c = !1; let p = !1; let u = !1; let g = !1; let f = []; let m = debounce(j, d.interactiveDebounce); const b = idCounter++; const h = unique(d.plugins); var y = {
    id: b,
    reference: e,
    popper: div(),
    popperInstance: null,
    props: d,
    state: {
      isEnabled: !0, isVisible: !1, isDestroyed: !1, isMounted: !1, isShown: !1,
    },
    plugins: h,
    clearDelayTimeouts() { clearTimeout(n), clearTimeout(o), cancelAnimationFrame(a); },
    setProps(t) { if (y.state.isDestroyed) return; _('onBeforeUpdate', [y, t]), W(); const n = y.props; const o = evaluateProps(e, { ...n, ...removeUndefinedProps(t), ignoreAttributes: !0 }); y.props = o, V(), n.interactiveDebounce !== o.interactiveDebounce && (R(), m = debounce(j, o.interactiveDebounce)); n.triggerTarget && !o.triggerTarget ? normalizeToArray(n.triggerTarget).forEach(((e) => { e.removeAttribute('aria-expanded'); })) : o.triggerTarget && e.removeAttribute('aria-expanded'); $(), O(), A && A(n, o); y.popperInstance && (Y(), Z().forEach(((e) => { requestAnimationFrame(e._tippy.popperInstance.forceUpdate); }))); _('onAfterUpdate', [y, t]); },
    setContent(e) { y.setProps({ content: e }); },
    show() { const e = y.state.isVisible; const t = y.state.isDestroyed; const n = !y.state.isEnabled; const o = currentInput.isTouch && !y.props.touch; const a = getValueAtIndexOrReturn(y.props.duration, 0, defaultProps.duration); if (e || t || n || o) return; if (I().hasAttribute('disabled')) return; if (_('onShow', [y], !1), !1 === y.props.onShow(y)) return; y.state.isVisible = !0, T() && (x.style.visibility = 'visible'); O(), H(), y.state.isMounted || (x.style.transition = 'none'); if (T()) { const i = P(); setTransitionDuration([i.box, i.content], 0); }r = function () { let e; if (y.state.isVisible && !g) { if (g = !0, x.offsetHeight, x.style.transition = y.props.moveTransition, T() && y.props.animation) { const t = P(); const n = t.box; const o = t.content; setTransitionDuration([n, o], a), setVisibilityState([n, o], 'visible'); }N(), $(), pushIfUnique(mountedInstances, y), (e = y.popperInstance) == null || e.forceUpdate(), _('onMount', [y]), y.props.animation && T() && (function (e, t) { F(e, t); }(a, (() => { y.state.isShown = !0, _('onShown', [y]); }))); } }, (function () { let e; const t = y.props.appendTo; const n = I(); e = y.props.interactive && t === TIPPY_DEFAULT_APPEND_TO || t === 'parent' ? n.parentNode : invokeWithArgsOrReturn(t, [n]); e.contains(x) || e.appendChild(x); y.state.isMounted = !0, Y(); }()); },
    hide() { const e = !y.state.isVisible; const t = y.state.isDestroyed; const n = !y.state.isEnabled; const o = getValueAtIndexOrReturn(y.props.duration, 1, defaultProps.duration); if (e || t || n) return; if (_('onHide', [y], !1), !1 === y.props.onHide(y)) return; y.state.isVisible = !1, y.state.isShown = !1, g = !1, c = !1, T() && (x.style.visibility = 'hidden'); if (R(), G(), O(!0), T()) { const a = P(); const i = a.box; const s = a.content; y.props.animation && (setTransitionDuration([i, s], o), setVisibilityState([i, s], 'hidden')); }N(), $(), y.props.animation ? T() && (function (e, t) { F(e, (() => { !y.state.isVisible && x.parentNode && x.parentNode.contains(x) && t(); })); }(o, y.unmount)) : y.unmount(); },
    hideWithInteractivity(e) { S().addEventListener('mousemove', m), pushIfUnique(mouseMoveListeners, m), m(e); },
    enable() { y.state.isEnabled = !0; },
    disable() { y.hide(), y.state.isEnabled = !1; },
    unmount() { y.state.isVisible && y.hide(); if (!y.state.isMounted) return; X(), Z().forEach(((e) => { e._tippy.unmount(); })), x.parentNode && x.parentNode.removeChild(x); mountedInstances = mountedInstances.filter(((e) => e !== y)), y.state.isMounted = !1, _('onHidden', [y]); },
    destroy() { if (y.state.isDestroyed) return; y.clearDelayTimeouts(), y.unmount(), W(), delete e._tippy, y.state.isDestroyed = !0, _('onDestroy', [y]); },
  }; if (!d.render) return y; const v = d.render(y); var x = v.popper; var A = v.onUpdate; x.setAttribute('data-tippy-root', ''), x.id = `tippy-${y.id}`, y.popper = x, e._tippy = y, x._tippy = y; const E = h.map(((e) => e.fn(y))); const L = e.hasAttribute('aria-expanded'); return V(), $(), O(), _('onCreate', [y]), d.showOnCreate && J(), x.addEventListener('mouseenter', (() => { y.props.interactive && y.state.isVisible && y.clearDelayTimeouts(); })), x.addEventListener('mouseleave', (() => { y.props.interactive && y.props.trigger.indexOf('mouseenter') >= 0 && S().addEventListener('mousemove', m); })), y; function C() { const e = y.props.touch; return Array.isArray(e) ? e : [e, 0]; } function w() { return C()[0] === 'hold'; } function T() { let e; return !((e = y.props.render) == null || !e.$$tippy); } function I() { return l || e; } function S() { const e = I().parentNode; return e ? getOwnerDocument(e) : document; } function P() { return getChildren(x); } function k(e) { return y.state.isMounted && !y.state.isVisible || currentInput.isTouch || i && i.type === 'focus' ? 0 : getValueAtIndexOrReturn(y.props.delay, e ? 0 : 1, defaultProps.delay); } function O(e) { void 0 === e && (e = !1), x.style.pointerEvents = y.props.interactive && !e ? '' : 'none', x.style.zIndex = `${y.props.zIndex}`; } function _(e, t, n) { let o; (void 0 === n && (n = !0), E.forEach(((n) => { n[e] && n[e].apply(n, t); })), n) && (o = y.props)[e].apply(o, t); } function N() { const t = y.props.aria; if (t.content) { const n = `aria-${t.content}`; const o = x.id; normalizeToArray(y.props.triggerTarget || e).forEach(((e) => { const t = e.getAttribute(n); if (y.state.isVisible)e.setAttribute(n, t ? `${t} ${o}` : o); else { const a = t && t.replace(o, '').trim(); a ? e.setAttribute(n, a) : e.removeAttribute(n); } })); } } function $() { !L && y.props.aria.expanded && normalizeToArray(y.props.triggerTarget || e).forEach(((e) => { y.props.interactive ? e.setAttribute('aria-expanded', y.state.isVisible && e === I() ? 'true' : 'false') : e.removeAttribute('aria-expanded'); })); } function R() { S().removeEventListener('mousemove', m), mouseMoveListeners = mouseMoveListeners.filter(((e) => e !== m)); } function D(t) { if (!currentInput.isTouch || !u && t.type !== 'mousedown') { const n = t.composedPath && t.composedPath()[0] || t.target; if (!y.props.interactive || !actualContains(x, n)) { if (normalizeToArray(y.props.triggerTarget || e).some(((e) => actualContains(e, n)))) { if (currentInput.isTouch) return; if (y.state.isVisible && y.props.trigger.indexOf('click') >= 0) return; } else _('onClickOutside', [y, t]); !0 === y.props.hideOnClick && (y.clearDelayTimeouts(), y.hide(), p = !0, setTimeout((() => { p = !1; })), y.state.isMounted || G()); } } } function M() { u = !0; } function B() { u = !1; } function H() { const e = S(); e.addEventListener('mousedown', D, !0), e.addEventListener('touchend', D, TOUCH_OPTIONS), e.addEventListener('touchstart', B, TOUCH_OPTIONS), e.addEventListener('touchmove', M, TOUCH_OPTIONS); } function G() { const e = S(); e.removeEventListener('mousedown', D, !0), e.removeEventListener('touchend', D, TOUCH_OPTIONS), e.removeEventListener('touchstart', B, TOUCH_OPTIONS), e.removeEventListener('touchmove', M, TOUCH_OPTIONS); } function F(e, t) { const n = P().box; function o(e) { e.target === n && (updateTransitionEndListener(n, 'remove', o), t()); } if (e === 0) return t(); updateTransitionEndListener(n, 'remove', s), updateTransitionEndListener(n, 'add', o), s = o; } function z(t, n, o) {
    void 0 === o && (o = !1), normalizeToArray(y.props.triggerTarget || e).forEach(((e) => {
      e.addEventListener(t, n, o), f.push({
        node: e, eventType: t, handler: n, options: o,
      });
    }));
  } function V() { w() && (z('touchstart', U, { passive: !0 }), z('touchend', q, { passive: !0 })), splitBySpaces(y.props.trigger).forEach(((e) => { if (e !== 'manual') switch (z(e, U), e) { case 'mouseenter': z('mouseleave', q); break; case 'focus': z(isIE11 ? 'focusout' : 'blur', K); break; case 'focusin': z('focusout', K); } })); } function W() { f.forEach(((e) => { const t = e.node; const n = e.eventType; const o = e.handler; const a = e.options; t.removeEventListener(n, o, a); })), f = []; } function U(e) { let t; let n = !1; if (y.state.isEnabled && !Q(e) && !p) { const o = ((t = i) == null ? void 0 : t.type) === 'focus'; i = e, l = e.currentTarget, $(), !y.state.isVisible && isMouseEvent(e) && mouseMoveListeners.forEach(((t) => t(e))), e.type === 'click' && (y.props.trigger.indexOf('mouseenter') < 0 || c) && !1 !== y.props.hideOnClick && y.state.isVisible ? n = !0 : J(e), e.type === 'click' && (c = !n), n && !o && ee(e); } } function j(e) { const t = e.target; const n = I().contains(t) || x.contains(t); if (e.type !== 'mousemove' || !n) { const o = Z().concat(x).map(((e) => { let t; const n = (t = e._tippy.popperInstance) == null ? void 0 : t.state; return n ? { popperRect: e.getBoundingClientRect(), popperState: n, props: d } : null; })).filter(Boolean); isCursorOutsideInteractiveBorder(o, e) && (R(), ee(e)); } } function q(e) { Q(e) || y.props.trigger.indexOf('click') >= 0 && c || (y.props.interactive ? y.hideWithInteractivity(e) : ee(e)); } function K(e) { y.props.trigger.indexOf('focusin') < 0 && e.target !== I() || y.props.interactive && e.relatedTarget && x.contains(e.relatedTarget) || ee(e); } function Q(e) { return !!currentInput.isTouch && w() !== e.type.indexOf('touch') >= 0; } function Y() {
    X(); const t = y.props; const n = t.popperOptions; const o = t.placement; const a = t.offset; const i = t.getReferenceClientRect; const s = t.moveTransition; const l = T() ? getChildren(x).arrow : null; const d = i ? { getBoundingClientRect: i, contextElement: i.contextElement || I() } : e; const c = {
      name: '$$tippy', enabled: !0, phase: 'beforeWrite', requires: ['computeStyles'], fn(e) { const t = e.state; if (T()) { const n = P().box; ['placement', 'reference-hidden', 'escaped'].forEach(((e) => { e === 'placement' ? n.setAttribute('data-placement', t.placement) : t.attributes.popper[`data-popper-${e}`] ? n.setAttribute(`data-${e}`, '') : n.removeAttribute(`data-${e}`); })), t.attributes.popper = {}; } },
    }; const p = [{ name: 'offset', options: { offset: a } }, {
      name: 'preventOverflow',
      options: {
        padding: {
          top: 2, bottom: 2, left: 5, right: 5,
        },
      },
    }, { name: 'flip', options: { padding: 5 } }, { name: 'computeStyles', options: { adaptive: !s } }, c]; T() && l && p.push({ name: 'arrow', options: { element: l, padding: 3 } }), p.push.apply(p, (n == null ? void 0 : n.modifiers) || []), y.popperInstance = createPopper(d, x, {
      ...n, placement: o, onFirstUpdate: r, modifiers: p,
    });
  } function X() { y.popperInstance && (y.popperInstance.destroy(), y.popperInstance = null); } function Z() { return arrayFrom(x.querySelectorAll('[data-tippy-root]')); } function J(e) { y.clearDelayTimeouts(), e && _('onTrigger', [y, e]), H(); let t = k(!0); const o = C(); const a = o[0]; const i = o[1]; currentInput.isTouch && a === 'hold' && i && (t = i), t ? n = setTimeout((() => { y.show(); }), t) : y.show(); } function ee(e) { if (y.clearDelayTimeouts(), _('onUntrigger', [y, e]), y.state.isVisible) { if (!(y.props.trigger.indexOf('mouseenter') >= 0 && y.props.trigger.indexOf('click') >= 0 && ['mouseleave', 'mousemove'].indexOf(e.type) >= 0 && c)) { const t = k(!1); t ? o = setTimeout((() => { y.state.isVisible && y.hide(); }), t) : a = requestAnimationFrame((() => { y.hide(); })); } } else G(); }
} function tippy(e, t) { void 0 === t && (t = {}); const n = defaultProps.plugins.concat(t.plugins || []); bindGlobalEventListeners(); const o = { ...t, plugins: n }; const a = getArrayOfElements(e).reduce(((e, t) => { const n = t && createTippy(t, o); return n && e.push(n), e; }), []); return isElement(e) ? a[0] : a; }tippy.defaultProps = defaultProps, tippy.setDefaultProps = setDefaultProps, tippy.currentInput = currentInput, ({
  ...applyStyles$1,
  effect(e) {
    const t = e.state; const n = {
      popper: {
        position: t.options.strategy, left: '0', top: '0', margin: '0',
      },
      arrow: { position: 'absolute' },
      reference: {},
    }; Object.assign(t.elements.popper.style, n.popper), t.styles = n, t.elements.arrow && Object.assign(t.elements.arrow.style, n.arrow);
  },
}), tippy.setDefaultProps({ render }); const tooltipStyles = 'a,button,code,div,h1,h2,kbd,li,ol,p,span,strong,svg,ul{all:unset;box-sizing:border-box!important}div{display:block}:after,:before{all:unset}.tippy-box[data-animation=fade][data-state=hidden]{opacity:0}[data-tippy-root]{max-width:calc(100vw - 10px)}@media (forced-colors:active){[data-tippy-root]{border:2px solid transparent;border-radius:5px}}.tippy-box[data-placement^=top]>.tippy-arrow{bottom:0}.tippy-box[data-placement^=top]>.tippy-arrow:before{border-top-color:initial;border-width:8px 8px 0;bottom:-7px;left:0;transform-origin:center top}.tippy-box[data-placement^=bottom]>.tippy-arrow{top:0}.tippy-box[data-placement^=bottom]>.tippy-arrow:before{border-bottom-color:initial;border-width:0 8px 8px;left:0;top:-7px;transform-origin:center bottom}.tippy-box[data-placement^=left]>.tippy-arrow{right:0}.tippy-box[data-placement^=left]>.tippy-arrow:before{border-left-color:initial;border-width:8px 0 8px 8px;right:-7px;transform-origin:center left}.tippy-box[data-placement^=right]>.tippy-arrow{left:0}.tippy-box[data-placement^=right]>.tippy-arrow:before{border-right-color:initial;border-width:8px 8px 8px 0;left:-7px;transform-origin:center right}.tippy-arrow{color:#333;height:16px;width:16px}.tippy-arrow:before{border-color:transparent;border-style:solid;content:"";position:absolute}.tippy-content{padding:5px 9px;position:relative;z-index:1}.tippy-box[data-theme~=sa11y-theme][role=tooltip]{box-sizing:border-box!important}.tippy-box[data-theme~=sa11y-theme][role=tooltip][data-animation=fade][data-state=hidden]{opacity:0}.tippy-box[data-theme~=sa11y-theme][role=tooltip][data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}[role=dialog]{min-width:300px;text-align:start}[role=tooltip]{min-width:185px;text-align:center}.tippy-box[data-theme~=sa11y-theme]{-webkit-font-smoothing:auto;background-color:var(--sa11y-panel-bg);border-radius:4px;box-shadow:0 0 20px 4px rgba(154,161,177,.15),0 4px 80px -8px rgba(36,40,47,.25),0 4px 4px -2px rgba(91,94,105,.15)!important;color:var(--sa11y-panel-primary);display:block;font-family:var(--sa11y-font-face);font-size:var(--sa11y-normal-text);font-weight:400;letter-spacing:normal;line-height:22px;outline:0;padding:8px;position:relative;transition-property:transform,visibility,opacity}.tippy-box[data-theme~=sa11y-theme] code{font-family:monospace}.tippy-box[data-theme~=sa11y-theme] code,.tippy-box[data-theme~=sa11y-theme] kbd{-webkit-font-smoothing:auto;background-color:var(--sa11y-panel-badge);border-radius:3.2px;color:var(--sa11y-panel-primary);letter-spacing:normal;line-height:22px;padding:1.6px 4.8px}.tippy-box[data-theme~=sa11y-theme][data-placement^=top]{text-align:center}.tippy-box[data-theme~=sa11y-theme] .tippy-content{padding:5px 9px}.tippy-box[data-theme~=sa11y-theme] sub,.tippy-box[data-theme~=sa11y-theme] sup{font-size:var(--sa11y-small-text)}.tippy-box[data-theme~=sa11y-theme] ul{-webkit-margin-after:0;-webkit-margin-before:0;margin:0;margin-block-end:0;margin-block-start:0;padding:0;position:relative}.tippy-box[data-theme~=sa11y-theme] li{display:list-item;margin:5px 10px 0 20px;padding-bottom:5px}.tippy-box[data-theme~=sa11y-theme] a{color:var(--sa11y-hyperlink);cursor:pointer;text-decoration:underline}.tippy-box[data-theme~=sa11y-theme] a:focus,.tippy-box[data-theme~=sa11y-theme] a:hover{text-decoration:none}.tippy-box[data-theme~=sa11y-theme] strong{font-weight:600}.tippy-box[data-theme~=sa11y-theme] hr{background:var(--sa11y-panel-bg-splitter);border:none;height:1px;margin:10px 0;opacity:1;padding:0}.tippy-box[data-theme~=sa11y-theme] button.close-btn{margin:0}.tippy-box[data-theme~=sa11y-theme] button[data-sa11y-dismiss]{background:var(--sa11y-panel-bg-secondary);border:1px solid var(--sa11y-button-outline);border-radius:5px;color:var(--sa11y-panel-primary);cursor:pointer;display:block;margin:10px 5px 5px 0;padding:4px 8px}.tippy-box[data-theme~=sa11y-theme] button[data-sa11y-dismiss]:focus,.tippy-box[data-theme~=sa11y-theme] button[data-sa11y-dismiss]:hover{background:var(--sa11y-shortcut-hover)}.tippy-box[data-theme~=sa11y-theme][data-placement^=top]>.tippy-arrow:before{border-top-color:var(--sa11y-panel-bg)}.tippy-box[data-theme~=sa11y-theme][data-placement^=bottom]>.tippy-arrow:before{border-bottom-color:var(--sa11y-panel-bg)}.tippy-box[data-theme~=sa11y-theme][data-placement^=left]>.tippy-arrow:before{border-left-color:var(--sa11y-panel-bg)}.tippy-box[data-theme~=sa11y-theme][data-placement^=right]>.tippy-arrow:before{border-right-color:var(--sa11y-panel-bg)}@media (forced-colors:active){.tippy-box[data-theme~=sa11y-theme][data-placement^=bottom]>.tippy-arrow:before,.tippy-box[data-theme~=sa11y-theme][data-placement^=left]>.tippy-arrow:before,.tippy-box[data-theme~=sa11y-theme][data-placement^=right]>.tippy-arrow:before,.tippy-box[data-theme~=sa11y-theme][data-placement^=top]>.tippy-arrow:before{filter:invert(1);forced-color-adjust:none}.tippy-box[data-theme~=sa11y-theme] .tippy-arrow{z-index:-1}}'; class TooltipComponent extends HTMLElement {
  connectedCallback() {
    const e = this.attachShadow({ mode: 'open' }); const t = document.createElement('style'); t.innerHTML = tooltipStyles + sharedStyles, e.appendChild(t); const n = { name: 'hideOnEsc', defaultValue: !0, fn({ hide: e }) { const t = (t) => { t.keyCode === 27 && e(); }; return { onShow() { document.addEventListener('keydown', t); }, onHide() { document.removeEventListener('keydown', t); } }; } }; const o = []; Elements.Annotations.Array.forEach(((e) => { const t = e.shadowRoot.querySelectorAll('.sa11y-btn'); t && o.push(...Array.from(t)); })); const a = tippy(o, {
      interactive: !0, trigger: 'mouseenter click', arrow: !0, delay: [0, 400], theme: 'sa11y-theme', placement: 'right-start', allowHTML: !0, role: 'dialog', aria: { content: null, expanded: 'auto' }, appendTo: e, zIndex: 2147483645, plugins: [n], onShow(e) { const t = e.popper; a.forEach(((e) => { e !== t && e.hide(); })); e.reference.getRootNode().host.setAttribute('data-sa11y-opened', ''), t.querySelector('.close-btn').addEventListener('click', (() => { e.hide(), e.reference.focus(); })); }, onTrigger(e, t) { t.type === 'click' && setTimeout((() => { e.popper.querySelector('.close-btn').focus(), trapFocus(e.popper); }), 0); }, onHide(e) { e.popper.querySelector('.close-btn').removeEventListener('click', (() => { e.hide(); })); e.reference.getRootNode().host.removeAttribute('data-sa11y-opened'); },
    }); let i; i = navigator.userAgent.indexOf('Mac') !== -1 ? '<span class="kbd">Option</span> + <span class="kbd">S</span>' : '<span class="kbd">Alt</span> + <span class="kbd">S</span>', tippy(Constants.Panel.skipButton, {
      content: `${Lang._('SHORTCUT_TOOLTIP')} &raquo; <br> ${i}`, allowHTML: !0, delay: [500, 0], trigger: 'mouseenter focusin', arrow: !0, placement: 'top', theme: 'sa11y-theme', maxWidth: 165, role: 'tooltip', aria: { content: null, expanded: !1 }, appendTo: e, zIndex: 2147483645,
    });
  }
} class DismissTooltip extends HTMLElement {
  connectedCallback() {
    const e = this.attachShadow({ mode: 'open' }); const t = document.createElement('style'); t.innerHTML = tooltipStyles + sharedStyles, e.appendChild(t), this.object = tippy(Constants.Panel.dismissButton, {
      delay: [500, 0], trigger: 'mouseenter focusin', arrow: !0, placement: 'top', theme: 'sa11y-theme', maxWidth: 165, role: 'tooltip', aria: { content: null, expanded: !1 }, appendTo: e, zIndex: 2147483645,
    });
  }
} const annotationStyles = '.instance{display:block}.instance-inline{display:inline-block;text-align:end}button{border-radius:50%;box-shadow:0 0 16px 0 rgba(0,0,0,.31);cursor:pointer;display:block;font-size:0;line-height:normal;min-width:0;padding:0;transition:all .2s ease-in-out;z-index:8888}button,button:after{height:36px;position:absolute;width:36px}button:after{content:"";left:-7px;padding:7px;top:-7px}button.warning-btn{margin:20px}button.error-btn,button.good-btn{margin:10px}button.error-btn-text,button.good-btn-text,button.warning-btn-text{margin:-30px 10px}button.error-btn,button.error-btn-text{background:50% 50% var(--sa11y-error-svg) no-repeat;background-color:var(--sa11y-error);background-size:22px;border:1px solid var(--sa11y-error)}button.error-btn-text:focus,button.error-btn-text:hover,button.error-btn:focus,button.error-btn:hover{background-color:var(--sa11y-error-hover)}button.good-btn,button.good-btn-text{background:50% 50% var(--sa11y-good) var(--sa11y-good-svg) no-repeat;background-color:var(--sa11y-good);background-size:20px;border:1px solid var(--sa11y-good)}button.good-btn-text:focus,button.good-btn-text:hover,button.good-btn:focus,button.good-btn:hover{background-color:var(--sa11y-good-hover)}button.warning-btn,button.warning-btn-text{background:50% 50% var(--sa11y-warning) var(--sa11y-warning-svg) no-repeat;background-color:var(--sa11y-warning);background-size:24px;border:1px solid var(--sa11y-warning);transform:scaleX(var(--sa11y-icon-direction))}button.warning-btn-text:focus,button.warning-btn-text:hover,button.warning-btn:focus,button.warning-btn:hover{background-color:var(--sa11y-warning-hover)}button.sa11y-btn:active,button.sa11y-btn:focus{box-shadow:0 0 0 5px var(--sa11y-focus-color);outline:0}@media screen and (forced-colors:active){button.sa11y-btn{border:1px solid transparent!important;forced-color-adjust:none;outline:3px solid transparent!important}}'; class Annotations extends HTMLElement {connectedCallback() { const e = this.attachShadow({ mode: 'open' }); const t = document.createElement('style'); t.innerHTML = annotationStyles + sharedStyles, e.appendChild(t); }} function annotate(e, t, n, o = !1, a, i, s) { const r = ['error', 'warning', 'good']; if (r.indexOf(t) === -1) throw Error(`Invalid type [${t}] for annotation`); [t].forEach(((t) => { if (t === 'error' && void 0 !== e) { const t = o ? 'data-sa11y-error-inline' : 'data-sa11y-error'; e.setAttribute(t, i); } else if (t === 'warning' && void 0 !== e) { const t = o ? 'data-sa11y-warning-inline' : 'data-sa11y-warning'; e.setAttribute(t, i); } })); const l = { [r[0]]: Lang._('ERROR'), [r[1]]: Lang._('WARNING'), [r[2]]: Lang._('GOOD') }; const d = !0 === s && t === 'warning' ? `<button data-sa11y-dismiss='${i}' type='button'>${Lang._('DISMISS')}</button>` : ''; const c = document.createElement('sa11y-annotation'); c.setAttribute('data-sa11y-annotation', i); const p = document.createElement('div'); const u = document.createElement('li'); if (void 0 === e)Constants.Panel.pageIssues.classList.add('active'), Constants.Panel.panel.classList.add('has-page-issues'), u.innerHTML = `<strong>${l[t]}</strong> ${n}`, Constants.Panel.pageIssuesList.insertAdjacentElement('afterbegin', u); else { p.classList.add(`${o ? 'instance-inline' : 'instance'}`), p.innerHTML = `\n    <button\n      type="button"\n      aria-label="${l[t]}"\n      aria-haspopup="dialog"\n      class="sa11y-btn ${[t]}-btn${o ? '-text' : ''}"\n      data-tippy-content=\n        "<div lang='${Lang._('LANG_CODE')}'>\n          <button class='close-btn close-tooltip' aria-label='${Lang._('ALERT_CLOSE')}'></button>\n          <div class='header-text'><h2>${l[t]}</h2></div>\n          ${escapeHTML(n)}\n          ${d}\n        </div>"\n    ></button>`; let i = e.closest('a, button'); i || (i = e), i.insertAdjacentElement(a, c), c.shadowRoot.appendChild(p); } } const detectOverflow = () => { document.querySelectorAll('sa11y-annotation').forEach(((e) => { const t = ((e, t, n) => { let o = e; for (;o !== null;) { if (window.getComputedStyle(o).getPropertyValue(t) === n) return o; o = o.parentElement; } return null; })(e, 'overflow', 'hidden'); t !== null && t.setAttribute('data-sa11y-overflow', ''); })); }; const nudge = () => { document.querySelectorAll('sa11y-annotation').forEach(((e) => { const t = e.nextElementSibling; t !== null && t.tagName === 'SA11Y-ANNOTATION' && customElements.get('sa11y-annotation') && t.shadowRoot.querySelector('button').setAttribute('style', 'margin: -5px -15px !important;'); })); }; class HeadingAnchor extends HTMLElement {connectedCallback() { this.attachShadow({ mode: 'open' }); }} class HeadingLabel extends HTMLElement {connectedCallback() { const e = this.attachShadow({ mode: 'open' }); const t = document.createElement('style'); t.textContent = '\n      span.heading-label {\n        background-color: #777678;\n        background-image: linear-gradient(to bottom right, #b629ce, #16aec2);\n        border-radius: 5px;\n        border: 1px solid #36a5c3;\n        color: white;\n        display: inline-block;\n        font-family: var(--sa11y-font-face);\n        font-weight: 500;\n        font-size: 17px;\n        line-height: normal;\n        letter-spacing: normal;\n        margin: -5px 0 0 5px;\n        padding: 3px;\n        position: absolute;\n        text-shadow: 1px 1px black;\n        -webkit-text-fill-color: white;\n        z-index: 200;\n      }\n      @media screen and (forced-colors: active) {\n        span.heading-label {\n          border: 2px solid transparent;\n        }\n      }', e.appendChild(t); }} const closeAnyActiveTooltips = () => { const e = document.querySelector('sa11y-tooltips').shadowRoot.querySelector('button'); e !== null && e.click(); }; const getHiddenParent = (e) => { const t = findVisibleParent(e.getRootNode().host, 'display', 'none'); if (t !== null) { const e = t.previousElementSibling; addPulse(e || t.parentNode); } }; const getScrollPosition = (e) => { if (e.offsetTop === 0) { const t = findVisibleParent(e.getRootNode().host, 'display', 'none'); getHiddenParent(e); const n = e.getAttribute('data-tippy-content'); if (createAlert(`${Lang._('NOT_VISIBLE_ALERT')}`, n), closeAnyActiveTooltips(), t) { const e = t.previousElementSibling; const { parentNode: n } = t; return e ? offsetTop(e).top - 150 : offsetTop(n).top - 150; } } else removeAlert(), Constants.Panel.skipButton.focus(); return offsetTop(e).top - 150; }; let index = -1; const determineIndex = () => { const e = store.getItem('sa11y-latest-dismissed'); e !== null && (index = parseInt(e, 10) - 1), store.removeItem('sa11y-latest-dismissed'); const t = find('[data-sa11y-opened]', 'root'); t[0] && (index = parseInt(t[0].getAttribute('data-sa11y-position'), 10)); }; const goToNext = () => { determineIndex(); const e = Elements.Annotations.Array; index >= e.length - 1 && (index = -1); const t = e[index + 1].shadowRoot.querySelector('button'); const n = getScrollPosition(t); window.scrollTo({ top: n, behavior: `${Constants.Global.scrollBehaviour}` }), t.offsetTop !== 0 && (t.focus(), t.click()), index += 1; }; const goToPrev = () => { if (determineIndex(), index > 0) { const e = Elements.Annotations.Array[index - 1].shadowRoot.querySelector('button'); const t = getScrollPosition(e); window.scrollTo({ top: t, behavior: `${Constants.Global.scrollBehaviour}` }), e.offsetTop !== 0 && (e.focus(), e.click()), index -= 1, index === -1 && (index = Elements.Annotations.Array.length - 1); } }; function keyboardShortcut(e) { Elements.Annotations.Array.length && !Constants.Panel.skipButton.hasAttribute('disabled') && (e.altKey && e.code === 'KeyS' ? (e.preventDefault(), goToNext()) : e.altKey && e.code === 'KeyW' && (e.preventDefault(), goToPrev())); } function handleSkipButton() { goToNext(); } const keyboardShortcutHandler = (e) => keyboardShortcut(e); const handleSkipButtonHandler = (e) => handleSkipButton(); function skipToIssue() { document.addEventListener('keydown', keyboardShortcutHandler), Constants.Panel.skipButton.addEventListener('click', handleSkipButtonHandler); } function removeSkipBtnListeners() { document.removeEventListener('keydown', keyboardShortcutHandler), Constants.Panel.skipButton.removeEventListener('click', handleSkipButtonHandler); } function checkImages(e) {
  return Elements.Found.Images.forEach(((t) => {
    const n = t.getAttribute('alt'); if (n === null) {
      t.closest('a[href]') ? fnIgnore(t.closest('a[href]')).textContent.trim().length >= 1 ? e.push({
        element: t, type: 'error', content: Lang.sprintf('MISSING_ALT_LINK_BUT_HAS_TEXT_MESSAGE'), inline: !1, position: 'beforebegin',
      }) : fnIgnore(t.closest('a[href]')).textContent.trim().length === 0 && e.push({
        element: t, type: 'error', content: Lang.sprintf('MISSING_ALT_LINK_MESSAGE'), inline: !1, position: 'beforebegin',
      }) : e.push({
        element: t, type: 'error', content: Lang.sprintf('MISSING_ALT_MESSAGE'), inline: !1, position: 'beforebegin',
      });
    } else {
      const o = sanitizeHTML(n); const a = ((e) => { const t = [null, null, null]; return ['.png', '.jpg', '.jpeg', '.webp', '.gif', '.tiff', '.svg', 'DSC_'].forEach(((n) => { e.toLowerCase().indexOf(n) >= 0 && (t[0] = n); })), Lang._('SUSPICIOUS_ALT_STOPWORDS').forEach(((n) => { e.toLowerCase().indexOf(n) >= 0 && (t[1] = n); })), Lang._('PLACEHOLDER_ALT_STOPWORDS').forEach(((n) => { e.length === n.length && e.toLowerCase().indexOf(n) >= 0 && (t[2] = n); })), t; })(o); const i = n.length; const s = t.getAttribute('src'); const r = s || t.getAttribute('srcset'); if (t.closest('a[href]') && t.closest('a[href]').getAttribute('tabindex') === '-1' && t.closest('a[href]').getAttribute('aria-hidden') === 'true');else if (a[0] !== null && t.closest('a[href]')) {
        e.push({
          element: t, type: 'error', content: Lang.sprintf('LINK_IMAGE_BAD_ALT_MESSAGE', a[0], o), inline: !1, position: 'beforebegin',
        });
      } else if (a[2] !== null && t.closest('a[href]')) {
        e.push({
          element: t, type: 'error', content: Lang.sprintf('LINK_IMAGE_PLACEHOLDER_ALT_MESSAGE', o), inline: !1, position: 'beforebegin',
        });
      } else if (a[1] !== null && t.closest('a[href]')) {
        const n = prepareDismissal(`LINKEDIMAGE${r + o}`); e.push({
          element: t, type: 'warning', content: Lang.sprintf('LINK_IMAGE_SUS_ALT_MESSAGE', a[1], o), inline: !1, position: 'beforebegin', dismiss: n,
        });
      } else if (a[0] !== null) {
        e.push({
          element: t, type: 'error', content: Lang.sprintf('LINK_ALT_HAS_BAD_WORD_MESSAGE', a[0], o), inline: !1, position: 'beforebegin',
        });
      } else if (a[2] !== null) {
        e.push({
          element: t, type: 'error', content: Lang.sprintf('ALT_PLACEHOLDER_MESSAGE', o), inline: !1, position: 'beforebegin',
        });
      } else if (a[1] !== null) {
        const n = prepareDismissal(`IMAGE${r + o + a[1]}`); e.push({
          element: t, type: 'warning', content: Lang.sprintf('ALT_HAS_SUS_WORD', a[1], o), inline: !1, position: 'beforebegin', dismiss: n,
        });
      } else if (n !== '' && n !== ' ' || !t.closest('a[href]')) {
        if (n.length > 250 && t.closest('a[href]')) {
          const a = prepareDismissal(`LINKEDIMAGE${r + o + n.length}`); e.push({
            element: t, type: 'warning', content: Lang.sprintf('LINK_IMAGE_LONG_ALT', i, o), inline: !1, position: 'beforebegin', dismiss: a,
          });
        } else if (n !== '' && t.closest('a[href]') && fnIgnore(t.closest('a[href]')).textContent.trim().length === 0) {
          const n = prepareDismissal(`LINKEDIMAGE${r + o}`); e.push({
            element: t, type: 'warning', content: Lang.sprintf('LINK_IMAGE_ALT_WARNING', o), inline: !1, position: 'beforebegin', dismiss: n,
          });
        } else if (n !== '' && t.closest('a[href]') && fnIgnore(t.closest('a[href]')).textContent.trim().length >= 1) {
          const n = prepareDismissal(`LINKEDIMAGE${r + o}`); e.push({
            element: t, type: 'warning', content: Lang.sprintf('LINK_IMAGE_ALT_AND_TEXT_WARNING', o), inline: !1, position: 'beforebegin', dismiss: n,
          });
        } else if (n === '' || n === ' ') {
          if (t.closest('figure')) {
            const n = t.closest('figure').querySelector('figcaption'); if (n !== null && n.textContent.trim().length >= 1) {
              const n = prepareDismissal(`DECORATIVE${r}`); e.push({
                element: t, type: 'warning', content: Lang.sprintf('IMAGE_FIGURE_DECORATIVE'), inline: !1, position: 'beforebegin', dismiss: n,
              });
            } else {
              const n = prepareDismissal(`DECORATIVE${r}`); e.push({
                element: t, type: 'warning', content: Lang.sprintf('IMAGE_DECORATIVE'), inline: !1, position: 'beforebegin', dismiss: n,
              });
            }
          } else {
            const n = prepareDismissal(`DECORATIVE${r}`); e.push({
              element: t, type: 'warning', content: Lang.sprintf('IMAGE_DECORATIVE'), inline: !1, position: 'beforebegin', dismiss: n,
            });
          }
        } else if (n.length > 250) {
          const a = prepareDismissal(`IMAGE${r + o + n.length}`); e.push({
            element: t, type: 'warning', content: Lang.sprintf('IMAGE_ALT_TOO_LONG', i, o), inline: !1, position: 'beforebegin', dismiss: a,
          });
        } else if (n !== '') {
          if (t.closest('figure')) {
            const n = t.closest('figure').querySelector('figcaption'); if (n && n.textContent.trim().toLowerCase() === o.trim().toLowerCase()) {
              const n = prepareDismissal(`FIGURE${r + o}`); e.push({
                element: t, type: 'warning', content: Lang.sprintf('IMAGE_FIGURE_DUPLICATE_ALT', o), inline: !1, position: 'beforebegin', dismiss: n,
              });
            } else {
              e.push({
                element: t, type: 'good', content: Lang.sprintf('IMAGE_PASS', o), inline: !1, position: 'beforebegin',
              });
            }
          } else {
            e.push({
              element: t, type: 'good', content: Lang.sprintf('IMAGE_PASS', o), inline: !1, position: 'beforebegin',
            });
          }
        }
      } else {
        t.closest('a[href]').getAttribute('tabindex') === '-1' && t.closest('a[href]').getAttribute('aria-hidden') === 'true' || (t.closest('a[href]').getAttribute('aria-hidden') === 'true' ? e.push({
          element: t, type: 'error', content: Lang.sprintf('LINK_IMAGE_ARIA_HIDDEN'), inline: !1, position: 'beforebegin',
        }) : fnIgnore(t.closest('a[href]')).textContent.trim().length === 0 ? e.push({
          element: t, type: 'error', content: Lang.sprintf('LINK_IMAGE_NO_ALT_TEXT'), inline: !1, position: 'beforebegin',
        }) : e.push({
          element: t, type: 'good', content: Lang.sprintf('LINK_IMAGE_HAS_TEXT'), inline: !1, position: 'beforebegin',
        }));
      }
    }
  })), { results: e };
} function checkHeaders(e, t, n, o, a, i) {
  let s; return Elements.Found.Headings.forEach(((o, r) => {
    const l = sanitizeHTML(computeTextNodeWithImage(fnIgnore(o))); let d; d = o.getAttribute('aria-level') ? +o.getAttribute('aria-level') : +o.tagName.slice(1), d = parseInt(d, 10); const c = l.length; let p = null; let u = null; if (d - s > 1 && r !== 0) {
      if (!0 === t) {
        p = Lang.sprintf('HEADING_NON_CONSECUTIVE_LEVEL', s, d), e.push({
          element: o, type: 'error', content: p, inline: !1, position: 'beforebegin',
        });
      } else {
        u = Lang.sprintf('HEADING_NON_CONSECUTIVE_LEVEL', s, d); const t = prepareDismissal(`HEADING${d + l}`); e.push({
          element: o, type: 'warning', content: u, inline: !1, position: 'beforebegin', dismiss: t,
        });
      }
    } else if (c === 0) {
      if (o.querySelectorAll('img').length) {
        const t = o.querySelector('img').getAttribute('alt'); t !== null && t !== ' ' && t !== '' || (p = Lang.sprintf('HEADING_EMPTY_WITH_IMAGE', d), e.push({
          element: o, type: 'error', content: p, inline: !1, position: 'beforebegin',
        }));
      } else {
        p = Lang.sprintf('HEADING_EMPTY', d), e.push({
          element: o, type: 'error', content: p, inline: !1, position: 'beforebegin',
        });
      }
    } else if (r === 0 && d !== 1 && d !== 2) {
      p = Lang.sprintf('HEADING_FIRST'), e.push({
        element: o, type: 'error', content: p, inline: !1, position: 'beforebegin',
      });
    } else if (c > i && !0 === n) {
      u = Lang.sprintf('HEADING_LONG', c); const t = prepareDismissal(`HEADING${d + l}`); e.push({
        element: o, type: 'warning', content: u, inline: !1, position: 'beforebegin', dismiss: t,
      });
    }s = d; const g = isElementVisuallyHiddenOrHidden(o); const f = findVisibleParent(o, 'display', 'none'); if (p !== null) {
      a.push({
        element: o, headingLevel: d, text: l, index: r, type: 'error', hidden: g, visibleParent: f,
      });
    } else if (u !== null) {
      const e = prepareDismissal(`HEADING${d + l}`); a.push({
        element: o, headingLevel: d, text: l, index: r, type: 'warning', hidden: g, visibleParent: f, dismiss: e,
      });
    } else {
      p !== null && u !== null || a.push({
        element: o, headingLevel: d, text: l, index: r, hidden: g, visibleParent: f,
      });
    }
  })), Elements.Found.HeadingOne.length === 0 && !0 === o && e.push({ type: 'error', content: Lang.sprintf('HEADING_MISSING_ONE') }), { results: e, headingOutline: a };
} function checkLinkText(e, t, n) {
  return Elements.Found.Links.forEach(((o) => {
    let a = computeAccessibleName(o); const i = o.getAttribute('aria-labelledby'); const s = o.getAttribute('aria-label'); let r = null; let l = null; const d = o.getAttribute('title'); const c = o.getAttribute('href'); if (o.children.length) { const e = o.children[0]; r = e.getAttribute('aria-labelledby'), l = e.getAttribute('aria-label'); } if (a === 'noAria') { a = getText(o); const e = o.querySelector('img'); if (e) { const t = computeAccessibleName(e); a += t !== 'noAria' ? t : e && e.getAttribute('alt') || ''; } } const p = ((e) => { const t = [null, null, null, null]; return Lang._('PARTIAL_ALT_STOPWORDS').forEach(((n) => (e.length === n.length && e.toLowerCase().indexOf(n) >= 0 && (t[0] = n), !1))), Lang._('WARNING_ALT_STOPWORDS').forEach(((n) => (e.toLowerCase().indexOf(n) >= 0 && (t[1] = n), !1))), e.toLowerCase().includes('doi') && (t[2] = 'doi.org'), ['http', '.asp', '.htm', '.php', '.edu/', '.com/', '.net/', '.org/', '.us/', '.ca/', '.de/', '.icu/', '.uk/', '.ru/', '.info/', '.top/', '.xyz/', '.tk/', '.cn/', '.ga/', '.cf/', '.nl/', '.io/', '.fr/', '.pe/', '.nz/', '.pt/', '.es/', '.pl/', '.ua/'].forEach(((n) => (e.toLowerCase().indexOf(n) >= 0 && (t[3] = n), !1))), t; })(fnIgnore(o, Constants.Exclusions.LinkSpan).textContent.replace(/[!?ãï¼ã&*()\-;':"\\|,.<>â£â³âââÂ«Â»â´]+/g, '').trim()); const u = a.match(/([<>â£â³âââÂ«Â»â´]+)/); const g = u ? u[1] : null; if (o.querySelectorAll('img').length);else if (c && !a) {
      o && d || (o.children.length ? e.push({
        element: o, type: 'error', content: Lang.sprintf('LINK_EMPTY_LINK_NO_LABEL'), inline: !0, position: 'afterend',
      }) : e.push({
        element: o, type: 'error', content: Lang.sprintf('LINK_EMPTY'), inline: !0, position: 'afterend',
      }));
    } else if (p[0] !== null) {
      if (i || s || r || l) {
        const n = sanitizeHTML(a); !0 === t && e.push({
          element: o, type: 'good', content: Lang.sprintf('LINK_LABEL', n), inline: !0, position: 'afterend',
        });
      } else {
        o.getAttribute('aria-hidden') === 'true' && o.getAttribute('tabindex') === '-1' || e.push({
          element: o, type: 'error', content: Lang.sprintf('LINK_STOPWORD', p[0]), inline: !0, position: 'afterend',
        });
      }
    } else if (p[1] !== null || g !== null) {
      const t = prepareDismissal(`LINK${a + c}`); const n = g || p[1]; e.push({
        element: o, type: 'warning', content: Lang.sprintf('LINK_BEST_PRACTICES', n), inline: !0, position: 'beforebegin', dismiss: t,
      });
    } else if (p[2] !== null && !0 === n) {
      const t = prepareDismissal(`LINK${a + p[2] + c}`); a.length > 8 && e.push({
        element: o, type: 'warning', content: Lang.sprintf('LINK_DOI'), inline: !0, position: 'beforebegin', dismiss: t,
      });
    } else if (p[3] !== null) {
      const t = prepareDismissal(`LINK${a + p[2] + c}`); a.length > 40 && e.push({
        element: o, type: 'warning', content: Lang.sprintf('LINK_URL'), inline: !0, position: 'beforebegin', dismiss: t,
      });
    } else if (i || s || r || l) {
      if (!0 === t) {
        const t = sanitizeHTML(a); e.push({
          element: o, type: 'good', content: Lang.sprintf('LINK_LABEL', t), inline: !0, position: 'afterend',
        });
      }
    } else {
      a !== '.' && a !== ',' && a !== '/' || e.push({
        element: o, type: 'error', content: Lang.sprintf('LINK_EMPTY'), inline: !0, position: 'afterend',
      });
    }
  })), { results: e };
} function checkContrast(e, t) {
  if (!0 === t.contrastPlugin && (store.getItem('sa11y-remember-contrast') === 'On' || !0 === t.headless || !0 === t.checkAllHideToggles)) {
    let t = { errors: [], warnings: [] }; const n = {
      parseRgb(e) { let t; let n; let o; let a; let i; if (n = e.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) { for (o = n.slice(1, 4), t = a = 0; a <= 2; t = ++a)o[t] = +o[t]; o[3] = 1; } else if (n = e.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) for (o = n.slice(1, 5), t = i = 0; i <= 3; t = ++i)o[t] = +o[t]; return o; }, relativeLuminance(e) { const t = []; for (let n = 0; n < 3; n++) { const o = e[n] / 255; t.push(o < 0.03928 ? o / 12.92 : ((o + 0.055) / 1.055) ** 2.4); } return 0.2126 * t[0] + 0.7152 * t[1] + 0.0722 * t[2]; }, contrastRatio(e, t) { const o = n.relativeLuminance(n.parseRgb(e)); const a = n.relativeLuminance(n.parseRgb(t)); return (Math.max(o, a) + 0.05) / (Math.min(o, a) + 0.05); }, getBackground(e) { if (e.nodeType === 11) { const t = e.getRootNode().host.parentNode; if (t === null) return 'alpha'; e = t; } const t = getComputedStyle(e); const o = t.backgroundColor; const a = t.backgroundImage; const i = `${n.parseRgb(o)}`.split(','); return i[3] < 1 && i[3] > 0 ? 'alpha' : o !== 'rgba(0, 0, 0, 0)' && o !== 'transparent' && a === 'none' && i[3] !== '0' ? o : a !== 'none' ? 'image' : e.tagName === 'HTML' ? 'rgb(255, 255, 255)' : n.getBackground(e.parentNode); }, check() { t = { errors: [], warnings: [] }; for (let e = 0; e < Elements.Found.Contrast.length; e++) { const o = Elements.Found.Contrast[e]; if (Elements.Found.Contrast) { const e = getComputedStyle(o); const { color: a } = e; const { fill: i } = e; const s = parseInt(e.fontSize, 10) * (3 / 4); const { fontWeight: r } = e; const l = o.tagName; const d = n.getBackground(o); const c = [].reduce.call(o.childNodes, ((e, t) => e + (t.nodeType === 3 ? t.textContent : '')), '').trim(); const p = window.getComputedStyle(o).clip.replace(/\s/g, ''); const u = parseFloat(window.getComputedStyle(o).width); const g = parseFloat(window.getComputedStyle(o).height); let f; let m; let b; if (u !== 1 || g !== 1 || p !== 'rect(0,0,0,0)' && p !== 'rect(1px,1px,1px,1px)') { if (l === 'SVG')f = Math.round(100 * n.contrastRatio(i, d)) / 100, f < 3 && (m = { elem: o, ratio: `${f}:1` }, t.errors.push(m)); else if (c.length || l === 'INPUT' || l === 'SELECT' || l === 'TEXTAREA') { const e = o.getAttribute('type'); e === 'range' || e === 'color' || (d === 'image' || d === 'alpha' ? (b = { elem: o }, t.warnings.push(b)) : (f = Math.round(100 * n.contrastRatio(a, d)) / 100, s >= 18 || s >= 14 && r >= 700 ? f < 3 && (m = { elem: o, ratio: `${f}:1` }, t.errors.push(m)) : f < 4.5 && (m = { elem: o, ratio: `${f}:1` }, t.errors.push(m)))); } } else; } } return t; },
    }; n.check(), t.errors.forEach(((t) => {
      const n = t.elem; const o = t.ratio; const a = sanitizeHTML(fnIgnore(n.cloneNode(!0), 'script, style').textContent); n.tagName === 'INPUT' ? e.push({
        element: n, type: 'error', content: Lang.sprintf('CONTRAST_INPUT_ERROR', o), inline: !1, position: 'beforebegin',
      }) : e.push({
        element: n, type: 'error', content: Lang.sprintf('CONTRAST_ERROR', o, a), inline: !1, position: 'beforebegin',
      });
    })), t.warnings.forEach(((t) => {
      const n = t.elem; const o = fnIgnore(n.cloneNode(!0), 'script, style').textContent; const a = prepareDismissal(`CONTRAST${o}`); const i = sanitizeHTML(o); e.push({
        element: n, type: 'warning', content: Lang.sprintf('CONTRAST_WARNING', i), inline: !1, position: 'beforebegin', dismiss: a,
      });
    }));
  } return e;
} function checkLabels(e, t) {
  return !0 === t.formLabelsPlugin && (store.getItem('sa11y-remember-labels') !== 'On' && !0 !== t.headless && !0 !== t.checkAllHideToggles || Elements.Found.Inputs.forEach(((t) => {
    if (!0 !== isElementHidden(t)) {
      let n = computeAccessibleName(t); const o = t.getAttribute('type'); const a = t.getAttribute('tabindex'); if (o === 'submit' || o === 'button' || o === 'hidden' || a === '-1');else if (o === 'image') {
        const n = t.getAttribute('alt'); n && n !== ' ' || t.getAttribute('aria-label') || e.push({
          element: t, type: 'error', content: Lang.sprintf('LABELS_MISSING_IMAGE_INPUT_MESSAGE'), inline: !1, position: 'beforebegin',
        });
      } else if (o === 'reset') {
        const o = prepareDismissal(`INPUT${n}`); e.push({
          element: t, type: 'warning', content: Lang.sprintf('LABELS_INPUT_RESET_MESSAGE'), inline: !1, position: 'beforebegin', dismiss: o,
        });
      } else if (t.getAttribute('aria-label') || t.getAttribute('aria-labelledby') || t.getAttribute('title')) {
        if (t.getAttribute('title')) {
          n = t.getAttribute('title'); const o = prepareDismissal(`INPUT${n}`); const a = sanitizeHTML(n); e.push({
            element: t, type: 'warning', content: Lang.sprintf('LABELS_ARIA_LABEL_INPUT_MESSAGE', a), inline: !1, position: 'beforebegin', dismiss: o,
          });
        } else {
          const o = prepareDismissal(`INPUT${n}`); const a = sanitizeHTML(n); e.push({
            element: t, type: 'warning', content: Lang.sprintf('LABELS_ARIA_LABEL_INPUT_MESSAGE', a), inline: !1, position: 'beforebegin', dismiss: o,
          });
        }
      } else if (t.closest('label') && t.closest('label').textContent.trim());else if (t.getAttribute('id')) {
        let n = !1; if (Elements.Found.Labels.forEach(((e) => { n || e.getAttribute('for') === t.getAttribute('id') && (n = !0); })), !n) {
          const n = t.getAttribute('id'); e.push({
            element: t, type: 'error', content: Lang.sprintf('LABELS_NO_FOR_ATTRIBUTE_MESSAGE', n), inline: !1, position: 'beforebegin',
          });
        }
      } else {
        e.push({
          element: t, type: 'error', content: Lang.sprintf('LABELS_MISSING_LABEL_MESSAGE'), inline: !1, position: 'beforebegin',
        });
      }
    }
  }))), { results: e };
} function checkLinksAdvanced(e, t) {
  if (!0 === t.linksAdvancedPlugin && (store.getItem('sa11y-remember-links-advanced') === 'On' || !0 === t.headless || !0 === t.checkAllHideToggles)) {
    const t = {}; Elements.Found.Links.forEach(((n) => {
      let o = computeAccessibleName(n); const a = n.querySelector('img'); if (o === 'noAria' && (o = fnIgnore(n, Constants.Exclusions.LinkSpan), o = getText(o), a)) { const e = computeAccessibleName(a); o += e !== 'noAria' ? e : a && a.getAttribute('alt') || ''; } const i = o.replace(/'|"|-|\.|\s+/g, '').toLowerCase(); const s = n.getAttribute('href'); if (o.length !== 0) {
        if (t[i] && i.length !== 0) {
          if (t[s]);else {
            const t = prepareDismissal(`LINK${i + s}`); const a = sanitizeHTML(o); e.push({
              element: n, type: 'warning', content: Lang.sprintf('LINK_IDENTICAL_NAME', a), inline: !0, position: 'beforebegin', dismiss: t,
            });
          }
        } else t[i] = !0, t[s] = !0;
      } const r = Lang._('NEW_WINDOW_PHRASES').some(((e) => (o.trim().length === 0 && n.getAttribute('title') && (o = n.getAttribute('title')), o.toLowerCase().indexOf(e) >= 0))); const l = ['pdf', 'doc', 'docx', 'word', 'mp3', 'ppt', 'text', 'pptx', 'txt', 'exe', 'dmg', 'rtf', 'windows', 'macos', 'csv', 'xls', 'xlsx', 'mp4', 'mov', 'avi', 'zip'].concat(Lang._('FILE_TYPE_PHRASES')).some(((e) => o.toLowerCase().indexOf(e) >= 0)); const d = n.matches("\n              a[href$='.pdf'],\n              a[href$='.doc'],\n              a[href$='.docx'],\n              a[href$='.zip'],\n              a[href$='.mp3'],\n              a[href$='.txt'],\n              a[href$='.exe'],\n              a[href$='.dmg'],\n              a[href$='.rtf'],\n              a[href$='.pptx'],\n              a[href$='.ppt'],\n              a[href$='.xls'],\n              a[href$='.xlsx'],\n              a[href$='.csv'],\n              a[href$='.mp4'],\n              a[href$='.mov'],\n              a[href$='.avi']\n            "); if (i.length !== 0 && n.getAttribute('target') === '_blank' && !d && !r) {
        const t = prepareDismissal(`LINK${i + s}`); e.push({
          element: n, type: 'warning', content: Lang.sprintf('NEW_TAB_WARNING'), inline: !0, position: 'beforebegin', dismiss: t,
        });
      } if (i.length !== 0 && d && !l) {
        const t = prepareDismissal(`LINK${i + s}`); e.push({
          element: n, type: 'warning', content: Lang.sprintf('FILE_TYPE_WARNING'), inline: !0, position: 'beforebegin', dismiss: t,
        });
      }
    }));
  } return e;
} function checkReadability() {
  let e; if (!0 === Constants.Readability.Plugin) {
    if (store.getItem('sa11y-remember-readability') === 'On') {
      Elements.Found.Readability.forEach(((e) => { const t = e.textContent; t.length >= 120 && t.charAt(t.length - 1) !== '.' && e.insertAdjacentHTML('beforeend', '<span data-sa11y-readability-period>.</span>'); })); const t = []; for (let e = 0; e < Elements.Found.Readability.length; e++) { const n = getText(fnIgnore(Elements.Found.Readability[e])); n !== '' && t.push(n); } const n = t.join(' ').toString(); if (['en', 'es', 'fr', 'de', 'nl', 'it', 'pt'].includes(Constants.Readability.Lang)) {
        const t = (e) => { let t = e; if (t = t.toLowerCase().replace('.', '').replace('\n', ''), t.length <= 3) return 1; t = t.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, ''), t = t.replace(/^y/, ''); const n = t.match(/[aeiouy]{1,2}/g); let o = 0; return !!n && (o = n.length), o; }; const o = n.replace(/[.!?-]+/g, ' ').split(' '); let a = 0; for (let e = 0; e < o.length; e++)o[e] != 0 && (a += 1); const i = n.split(/[.!?]+/); let s = 0; for (let e = 0; e < i.length; e++)i[e] !== '' && (s += 1); let r = 0; let l = 0; let d = 0; for (let e = 0; e < o.length; e++) if (o[e] != 0) { const n = t(o[e]); n === 1 && (l += 1), n === 2 && (d += 1), r += n; }let c = !1; Constants.Readability.Lang === 'en' ? c = 206.835 - a / s * 1.015 - r / a * 84.6 : Constants.Readability.Lang === 'fr' ? c = 207 - a / s * 1.015 - r / a * 73.6 : Constants.Readability.Lang === 'es' ? c = 206.84 - a / s * 1.02 - r / a * 100 * 0.6 : Constants.Readability.Lang === 'de' ? c = 180 - a / s - r / a * 58.5 : Constants.Readability.Lang === 'nl' ? c = 206.84 - r / a * 100 * 0.77 - a / s * 0.93 : Constants.Readability.Lang === 'it' ? c = 217 - a / s * 1.3 - r / a * 100 * 0.6 : Constants.Readability.Lang === 'pt' && (c = 248.835 - a / s * 1.015 - r / a * 84.6), c > 100 ? c = 100 : c < 0 && (c = 0); const p = c.toFixed(1); const u = (a / s).toFixed(1); const g = Math.round((a - (l + d)) / a * 100); let f; f = p >= 0 && p < 30 ? Lang._('LANG_VERY_DIFFICULT') : p > 31 && p < 49 ? Lang._('LANG_DIFFICULT') : p > 50 && p < 60 ? Lang._('LANG_FAIRLY_DIFFICULT') : Lang._('LANG_GOOD'), e = {
          score: p, averageWordsPerSentence: u, complexWords: g, difficultyLevel: f, wordCount: a,
        };
      } else if (['sv', 'fi', 'da', 'no', 'nb', 'nn'].includes(Constants.Readability.Lang)) {
        const t = ((e) => {
          const t = () => e.replace(/[-'.]/gi, '').split(/[^a-zA-ZÃ¶Ã¤Ã¥ÃÃÃÃÃ¦ÃÃ¸0-9]/g).filter(Boolean); const n = t().length; const o = t().filter(((e) => e.length > 6)).length; const a = e.split(/\?|!|\.|\n/g).filter(Boolean).length; const i = Math.round(n / a + 100 * o / n); const s = (n / a).toFixed(1); const r = Math.round(o / n * 100); let l; return l = i >= 0 && i < 39 ? Lang._('LANG_GOOD') : i > 40 && i < 50 ? Lang._('LANG_FAIRLY_DIFFICULT') : i > 51 && i < 61 ? Lang._('LANG_DIFFICULT') : Lang._('LANG_VERY_DIFFICULT'), {
            score: i, difficulty: l, avgWordsPerSentence: s, complexWords: r, wordCount: n,
          };
        })(n); e = {
          score: t.score, averageWordsPerSentence: t.avgWordsPerSentence, complexWords: t.complexWords, difficultyLevel: t.difficulty, wordCount: t.wordCount,
        };
      }!1 === Constants.Global.headless && (n.length === 0 ? Constants.Panel.readabilityInfo.innerHTML = Lang._('READABILITY_NO_P_OR_LI_MESSAGE') : e.wordCount > 30 ? (Constants.Panel.readabilityInfo.innerHTML = `${e.score} <span class="readability-score">${e.difficultyLevel}</span>`, Constants.Panel.readabilityDetails.innerHTML = `\n            <li>\n              <strong>${Lang._('LANG_AVG_SENTENCE')}</strong>\n              ${e.averageWordsPerSentence}\n            </li>\n            <li>\n              <strong>${Lang._('LANG_COMPLEX_WORDS')}</strong>\n              ${e.complexWords}%\n            </li>\n            <li>\n              <strong>${Lang._('LANG_TOTAL_WORDS')}</strong>\n              ${e.wordCount}\n            </li>`) : Constants.Panel.readabilityInfo.textContent = Lang._('READABILITY_NOT_ENOUGH_CONTENT_MESSAGE'));
    }
  } return e;
} function checkEmbeddedContent(e, t) {
  return !0 === t.embeddedContentAll && (!0 === t.embeddedContentAudio && Elements.Found.Audio.forEach(((t) => {
    const n = prepareDismissal(`IFRAME${t.getAttribute('src') !== 'undefined' ? t.getAttribute('src') : t.querySelector('[src]').getAttribute('src')}`); e.push({
      element: t, type: 'warning', content: Lang.sprintf('EMBED_AUDIO'), inline: !1, position: 'beforebegin', dismiss: n,
    });
  })), !0 === t.embeddedContentVideo && Elements.Found.Videos.forEach(((t) => {
    const n = t.getElementsByTagName('TRACK'); if (t.tagName === 'VIDEO' && n.length);else {
      const n = prepareDismissal(`IFRAME${t.getAttribute('src') !== 'undefined' ? t.getAttribute('src') : t.querySelector('[src]').getAttribute('src')}`); e.push({
        element: t, type: 'warning', content: Lang.sprintf('EMBED_VIDEO'), inline: !1, position: 'beforebegin', dismiss: n,
      });
    }
  })), !0 === t.embeddedContentDataViz && Elements.Found.Visualizations.forEach(((t) => {
    const n = prepareDismissal(`IFRAME${t.getAttribute('src') !== 'undefined' ? t.getAttribute('src') : t.querySelector('[src]').getAttribute('src')}`); e.push({
      element: t, type: 'warning', content: Lang.sprintf('EMBED_DATA_VIZ'), inline: !1, position: 'beforebegin', dismiss: n,
    });
  })), !0 === t.embeddedContentTitles && Elements.Found.Iframes.forEach(((t) => {
    t.tagName === 'VIDEO' || t.tagName === 'AUDIO' || t.getAttribute('aria-hidden') === 'true' || t.getAttribute('hidden') !== null || t.style.display === 'none' || t.getAttribute('role') === 'presentation' || t.getAttribute('title') !== null && t.getAttribute('title') !== '' || t.getAttribute('aria-label') !== null && t.getAttribute('aria-label') !== '' || t.getAttribute('aria-labelledby') === null && (t.classList.contains('sa11y-warning-border') && t.classList.remove('sa11y-warning-border'), e.push({
      element: t, type: 'error', content: Lang.sprintf('EMBED_MISSING_TITLE'), inline: !1, position: 'beforebegin',
    }));
  })), !0 === t.embeddedContentGeneral && Elements.Found.EmbeddedContent.forEach(((t) => {
    if (t.tagName === 'VIDEO' || t.tagName === 'AUDIO' || t.getAttribute('aria-hidden') === 'true' || t.getAttribute('hidden') !== null || t.style.display === 'none' || t.getAttribute('role') === 'presentation' || t.getAttribute('tabindex') === '-1');else {
      const n = prepareDismissal(`IFRAME${t.getAttribute('src') !== 'undefined' ? t.getAttribute('src') : t.querySelector('[src]').getAttribute('src')}`); e.push({
        element: t, type: 'warning', content: Lang.sprintf('EMBED_GENERAL_WARNING'), inline: !1, position: 'beforebegin', dismiss: n,
      });
    }
  }))), e;
} function checkQA(e, t) {
  if (!0 === t.badLinksQA && Elements.Found.CustomErrorLinks.forEach(((t) => {
    e.push({
      element: t, type: 'error', content: Lang.sprintf('QA_BAD_LINK', t), inline: !0, position: 'beforebegin',
    });
  })), !0 === t.strongItalicsQA && Elements.Found.StrongItalics.forEach(((t) => {
    const n = t.textContent.trim().length; const o = prepareDismissal(t.tagName + t.textContent); n > 400 && e.push({
      element: t.parentNode, type: 'warning', content: Lang.sprintf('QA_BAD_ITALICS'), inline: !1, position: 'beforebegin', dismiss: o,
    });
  })), Elements.Found.Links.forEach(((n) => {
    const o = n.getAttribute('href'); const a = Constants.Global.documentLinks.split(', '); if (o) {
      const i = a.some(((e) => o.includes(e))); const s = o.includes('.pdf'); const r = prepareDismissal(`DOCUMENT${o}`); !0 === t.documentQA && i ? e.push({
        element: n, type: 'warning', content: Lang.sprintf('QA_DOCUMENT'), inline: !0, position: 'beforebegin', dismiss: r,
      }) : !0 === t.pdfQA && s && e.push({
        element: n, type: 'warning', content: Lang.sprintf('QA_PDF'), inline: !0, position: 'beforebegin', dismiss: r,
      });
    }
  })), !0 === t.langQA && (!Elements.Found.Language || Elements.Found.Language.length < 2) && e.push({ type: 'error', content: Lang.sprintf('QA_PAGE_LANGUAGE') }), !0 === t.blockquotesQA && Elements.Found.Blockquotes.forEach(((t) => {
    const n = t.textContent; if (n.trim().length < 25) {
      const o = sanitizeHTML(n); const a = prepareDismissal(`BLOCKQUOTE${o}`); e.push({
        element: t, type: 'warning', content: Lang.sprintf('QA_BLOCKQUOTE_MESSAGE', o), inline: !1, position: 'beforebegin', dismiss: a,
      });
    }
  })), !0 === t.tablesQA && Elements.Found.Tables.forEach(((t) => {
    const n = t.querySelectorAll('th'); const o = t.querySelectorAll('h1, h2, h3, h4, h5, h6'); n.length === 0 && e.push({
      element: t, type: 'error', content: Lang.sprintf('TABLES_MISSING_HEADINGS'), inline: !1, position: 'beforebegin',
    }), o.length > 0 && o.forEach(((t) => {
      e.push({
        element: t, type: 'error', content: Lang.sprintf('TABLES_SEMANTIC_HEADING'), inline: !1, position: 'beforebegin',
      });
    })), n.forEach(((t) => {
      t.textContent.trim().length === 0 && e.push({
        element: t, type: 'error', content: Lang.sprintf('TABLES_EMPTY_HEADING'), inline: !1, position: 'afterbegin',
      });
    }));
  })), !0 === t.fakeHeadingsQA && Elements.Found.Paragraphs.forEach(((t) => {
    const n = t.innerHTML.indexOf('</strong><br>'); const o = t.innerHTML.indexOf('<br></strong>'); const a = 'h1, h2, h3, h4, h5, h6, [role="heading"][aria-level], blockquote'; const i = a.concat(', table'); const s = getText(t); let r; if (t && s.length >= 300) {
      const { firstChild: a } = t; if (a.tagName === 'STRONG' && (o !== -1 || n !== -1)) {
        r = getText(a); const n = r.match(/[.;?!"]/) !== null; if (!/[*]$/.test(r) && !t.closest(i) && r.length >= 4 && r.length <= 120 && !1 === n) {
          const t = sanitizeHTML(r); const n = prepareDismissal(`BOLD${t}`); e.push({
            element: a, type: 'warning', content: Lang.sprintf('QA_FAKE_HEADING', t), inline: !1, position: 'beforebegin', dismiss: n,
          });
        }
      }
    } if (/^<(strong)>.+<\/\1>$/.test(t.innerHTML.trim())) {
      r = s; const n = t.previousElementSibling; const o = r.match(/[.;?!"]/) !== null; if (n !== null && n.matches(a));else if (!/[*]$/.test(r) && r.length >= 4 && r.length <= 120 && !t.closest(i) && !1 === o) {
        const n = sanitizeHTML(r); const o = prepareDismissal(`BOLD${n}`); e.push({
          element: t, type: 'warning', content: Lang.sprintf('QA_FAKE_HEADING', n), inline: !1, position: 'beforebegin', dismiss: o,
        });
      }
    }((t) => {
      const n = getComputedStyle(t).fontSize.replace('px', ''); const o = 'h1, h2, h3, h4, h5, h6, [role="heading"][aria-level], blockquote'; const a = getText(t); const i = t.previousElementSibling; const s = a.match(/[.;?!"]/) !== null; if (i !== null && i.matches(o));else if (n >= 24 && !t.closest(o) && a.length >= 4 && a.length <= 120 && !1 === s) {
        const n = sanitizeHTML(a); const o = prepareDismissal(`BOLD${n}`); e.push({
          element: t, type: 'warning', content: Lang.sprintf('QA_FAKE_HEADING', n), inline: !1, position: 'beforebegin', dismiss: o,
        });
      }
    })(t);
  })), !0 === t.fakeListQA && Elements.Found.Paragraphs.forEach(((t) => {
    let n = ''; const o = {
      b: 'a', B: 'A', 2: '1', Ð±: 'Ð°', Ð: 'Ð',
    }; const a = (e) => e.replace(/^b|^B|^Ð±|^Ð|^2/, ((e) => o[e])); let i = !1; const s = t.textContent.substring(0, 2); if (s.trim().length > 0 && s !== n && s.match(/a\.|a\)|A\.|A\)|Ð°\.|Ð°\)|Ð\.|Ð\)|1\.|1\)|\*\s|-\s|--|â¢\s|â\s|â\s|â\s|â\s|â\s|â\s|â¯\s|âº\s|Â»\s/)) {
      const o = t.innerHTML.indexOf('<br>'); if (o !== -1) { s === a(t.innerHTML.substring(o + 4).trim().substring(0, 2)) && (i = !0); } if (!i) { if (getNextSibling(t, 'p')) { s === a(t.nextElementSibling.textContent.substring(0, 2)) && (i = !0); } } if (i) {
        const o = prepareDismissal(`LIST${t.textContent}`); e.push({
          element: t, type: 'warning', content: Lang.sprintf('QA_SHOULD_BE_LIST', s), inline: !1, position: 'beforebegin', dismiss: o,
        }), n = s;
      } else n = '';
    } else n = '';
  })), !0 === t.allCapsQA) {
    const t = (t) => {
      let n = ''; t.tagName === 'LI' ? t.childNodes.forEach(((e) => { e.nodeType === 3 && (n += e.textContent); })) : n = getText(t); const o = n.match(/([A-Z]{2,}[ ])([A-Z]{2,}[ ])([A-Z]{2,}[ ])([A-Z]{2,})/g); if (o && o[0].length > 10) {
        const o = prepareDismissal(`UPPERCASE${n}`); e.push({
          element: t, type: 'warning', content: Lang.sprintf('QA_UPPERCASE_WARNING'), inline: !1, position: 'beforebegin', dismiss: o,
        });
      }
    }; Elements.Found.Paragraphs.forEach(((e) => t(e))), Elements.Found.Headings.forEach(((e) => t(e))), Elements.Found.Lists.forEach(((e) => t(e))), Elements.Found.Blockquotes.forEach(((e) => t(e)));
  } if (!0 === t.duplicateIdQA) {
    const t = {}; Elements.Found.Ids.forEach(((n) => {
      const { id: o } = n; o && (void 0 === t[o] ? t[o] = 1 : e.push({
        element: n, type: 'error', content: Lang.sprintf('QA_DUPLICATE_ID', o), inline: !0, position: 'beforebegin',
      }));
    }));
  } if (!0 === t.underlinedTextQA) {
    Elements.Found.Underlines.forEach(((t) => {
      const n = prepareDismissal(`UNDERLINE${getText(t)}`); e.push({
        element: t, type: 'warning', content: Lang.sprintf('QA_TEXT_UNDERLINE_WARNING'), inline: !0, position: 'beforebegin', dismiss: n,
      });
    })); const t = (t) => {
      const n = getComputedStyle(t).textDecorationLine; const o = getText(t); if (n === 'underline') {
        const n = prepareDismissal(`UNDERLINE${o}`); e.push({
          element: t, type: 'warning', content: Lang.sprintf('QA_TEXT_UNDERLINE_WARNING'), inline: !1, position: 'beforebegin', dismiss: n,
        });
      }
    }; Elements.Found.Paragraphs.forEach(((e) => t(e))), Elements.Found.Headings.forEach(((e) => t(e))), Elements.Found.Lists.forEach(((e) => t(e))), Elements.Found.Blockquotes.forEach(((e) => t(e))), Elements.Found.Spans.forEach(((e) => t(e)));
  } if (!0 === t.pageTitleQA) { const t = document.querySelector('title'); t && t.textContent.trim().length !== 0 || e.push({ type: 'error', content: Lang.sprintf('QA_PAGE_TITLE') }); } return !0 === t.subscriptQA && Elements.Found.Subscripts.forEach(((t) => {
    const n = getText(t); if (n.length >= 80) {
      const o = prepareDismissal(t.tagName + n); e.push({
        element: t, type: 'warning', content: Lang.sprintf('QA_SUBSCRIPT_WARNING'), inline: !0, position: 'beforebegin', dismiss: o,
      });
    }
  })), e;
} class Sa11y {constructor(e) { const t = { ...defaultOptions, ...e }; this.initialize = () => { (() => { const { doNotRun: e } = t; return e.trim().length > 0 && document.querySelector(e); })() || (t.headless || (customElements.define('sa11y-heading-label', HeadingLabel), customElements.define('sa11y-heading-anchor', HeadingAnchor), customElements.define('sa11y-annotation', Annotations), customElements.define('sa11y-tooltips', TooltipComponent), customElements.define('sa11y-dismiss-tooltip', DismissTooltip), customElements.define('sa11y-control-panel', ControlPanel), customElements.define('sa11y-console-error', ConsoleErrors), Constants.initializeGlobal(t), Constants.initializeReadability(t), Constants.initializeExclusions(t), Constants.initializeEmbeddedContent(t)), documentLoadingCheck((() => { if (!0 === t.headless) this.checkAll(), store.removeItem('sa11y-dismissed'); else { const e = new ControlPanel(); document.body.appendChild(e), settingsPanelToggles(this.checkAll, this.resetAll), initializePanelToggles(), addColourFilters(), detectPageChanges(t.detectSPArouting, this.checkAll, this.resetAll), this.dismissTooltip = new DismissTooltip(), document.body.appendChild(this.dismissTooltip), Constants.Panel.toggle.disabled = !1, this.checkAll(), mainToggle(this.checkAll, this.resetAll); } }))); }, this.checkAll = async () => { try { this.results = [], this.headingOutline = [], this.errorCount = 0, this.warningCount = 0; document.querySelector(t.checkRoot) || createAlert(`${Lang.sprintf('ERROR_MISSING_ROOT_TARGET', t.checkRoot)}`), Constants.initializeShadowSearch(t.checkRoot, t.autoDetectShadowComponents, t.shadowComponents), Elements.initializeElements(t.linksToFlag), checkHeaders(this.results, t.nonConsecutiveHeadingIsError, t.flagLongHeadings, t.missingH1, this.headingOutline, t.headingMaxCharLength), checkLinkText(this.results, t.showGoodLinkButton, t.linksToDOI), checkImages(this.results), checkContrast(this.results, t), checkLabels(this.results, t), checkLinksAdvanced(this.results, t), checkQA(this.results, t), checkEmbeddedContent(this.results, t), checkReadability(), t.customChecks && t.customChecks(this.results), !0 === t.selectorPath && this.results.forEach(((e) => { if (void 0 !== e.element) { const t = generateSelectorPath(e.element); Object.assign(e, { cssPath: t }); } })); const e = dismissAnnotationsLogic(this.results, this.dismissTooltip); this.results = e.updatedResults, this.dismissed = e.dismissedIssues, this.dismissedCount = e.dismissCount; const n = updateCount(this.results, this.errorCount, this.warningCount); if (this.errorCount = n.error, this.warningCount = n.warning, updateBadge(this.errorCount, this.warningCount), store.getItem('sa11y-remember-panel') === 'Opened') { this.results.forEach(((e, n) => { Object.assign(e, { id: n }), annotate(e.element, e.type, e.content, e.inline, e.position, e.id, t.dismissAnnotations); })), Elements.initializeAnnotations(); const e = new TooltipComponent(); document.body.appendChild(e), dismissAnnotationsButtons(t.dismissAnnotations, this.results, this.dismissed, this.checkAll, this.resetAll), generatePageOutline(this.dismissed, this.headingOutline), updatePanel(this.dismissedCount, this.errorCount, this.warningCount), skipToIssue(), detectOverflow(), document.querySelectorAll('sa11y-annotation').forEach(((e) => { const t = e.nextElementSibling; t !== null && t.tagName === 'SA11Y-ANNOTATION' && customElements.get('sa11y-annotation') && t.shadowRoot.querySelector('button').setAttribute('style', 'margin: -5px -15px !important;'); })); } const o = new CustomEvent('sa11y-check-complete', { detail: { results: this.results, page: Constants.Global.currentPage } }); document.dispatchEvent(o); } catch (e) { const t = new ConsoleErrors(e); document.body.appendChild(t), console.error(e); } }, this.resetAll = (e = !0) => { for (Constants.Global.html.removeAttribute('data-sa11y-active'), resetAttributes(['data-sa11y-parent', 'data-sa11y-error', 'data-sa11y-warning', 'data-sa11y-good', 'data-sa11y-error-inline', 'data-sa11y-warning-inline', 'data-sa11y-overflow', 'data-sa11y-pulse-border', 'data-sa11y-filter'], 'document'), remove(['sa11y-annotation', 'sa11y-heading-label', 'sa11y-heading-anchor', 'sa11y-tooltips', '[data-sa11y-readability-period]', '[data-sa11y-clone-image-text]', '.sa11y-css-utilities'], 'document'), Constants.Panel.outlineList.innerHTML = '', Constants.Panel.pageIssuesList.innerHTML = '', Constants.Panel.readabilityInfo.innerHTML = '', Constants.Panel.readabilityDetails.innerHTML = '', Constants.Panel.panel.classList.remove('has-page-issues'), removeAlert(), removeSkipBtnListeners(), !0 === t.colourFilterPlugin && (Constants.Panel.colourFilterSelect.value = 0, Constants.Panel.colourPanel.classList.remove('active'), Constants.Panel.colourFilterSelect.classList.remove('active'), Constants.Panel.content.hidden = !1); Constants.Panel.status.firstChild;)Constants.Panel.status.removeChild(Constants.Panel.status.firstChild); e && Constants.Panel.panel.classList.remove('active'); }, this.initialize(); }} export { Lang, Sa11y };
